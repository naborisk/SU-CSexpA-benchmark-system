// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ohkilab/SU-CSexpA-benchmark-system/backend/ent/contest"
)

// Contest is the model entity for the Contest schema.
type Contest struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// QualifierStartAt holds the value of the "qualifier_start_at" field.
	QualifierStartAt time.Time `json:"qualifier_start_at,omitempty"`
	// QualifierEndAt holds the value of the "qualifier_end_at" field.
	QualifierEndAt time.Time `json:"qualifier_end_at,omitempty"`
	// QualifierSubmitLimit holds the value of the "qualifier_submit_limit" field.
	QualifierSubmitLimit int `json:"qualifier_submit_limit,omitempty"`
	// FinalStartAt holds the value of the "final_start_at" field.
	FinalStartAt time.Time `json:"final_start_at,omitempty"`
	// FinalEndAt holds the value of the "final_end_at" field.
	FinalEndAt time.Time `json:"final_end_at,omitempty"`
	// FinalSubmitLimit holds the value of the "final_submit_limit" field.
	FinalSubmitLimit int `json:"final_submit_limit,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Contest) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case contest.FieldID, contest.FieldQualifierSubmitLimit, contest.FieldFinalSubmitLimit:
			values[i] = new(sql.NullInt64)
		case contest.FieldQualifierStartAt, contest.FieldQualifierEndAt, contest.FieldFinalStartAt, contest.FieldFinalEndAt, contest.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Contest fields.
func (c *Contest) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case contest.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case contest.FieldQualifierStartAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field qualifier_start_at", values[i])
			} else if value.Valid {
				c.QualifierStartAt = value.Time
			}
		case contest.FieldQualifierEndAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field qualifier_end_at", values[i])
			} else if value.Valid {
				c.QualifierEndAt = value.Time
			}
		case contest.FieldQualifierSubmitLimit:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field qualifier_submit_limit", values[i])
			} else if value.Valid {
				c.QualifierSubmitLimit = int(value.Int64)
			}
		case contest.FieldFinalStartAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field final_start_at", values[i])
			} else if value.Valid {
				c.FinalStartAt = value.Time
			}
		case contest.FieldFinalEndAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field final_end_at", values[i])
			} else if value.Valid {
				c.FinalEndAt = value.Time
			}
		case contest.FieldFinalSubmitLimit:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field final_submit_limit", values[i])
			} else if value.Valid {
				c.FinalSubmitLimit = int(value.Int64)
			}
		case contest.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Contest.
// This includes values selected through modifiers, order, etc.
func (c *Contest) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// Update returns a builder for updating this Contest.
// Note that you need to call Contest.Unwrap() before calling this method if this Contest
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Contest) Update() *ContestUpdateOne {
	return NewContestClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Contest entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Contest) Unwrap() *Contest {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Contest is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Contest) String() string {
	var builder strings.Builder
	builder.WriteString("Contest(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("qualifier_start_at=")
	builder.WriteString(c.QualifierStartAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("qualifier_end_at=")
	builder.WriteString(c.QualifierEndAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("qualifier_submit_limit=")
	builder.WriteString(fmt.Sprintf("%v", c.QualifierSubmitLimit))
	builder.WriteString(", ")
	builder.WriteString("final_start_at=")
	builder.WriteString(c.FinalStartAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("final_end_at=")
	builder.WriteString(c.FinalEndAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("final_submit_limit=")
	builder.WriteString(fmt.Sprintf("%v", c.FinalSubmitLimit))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Contests is a parsable slice of Contest.
type Contests []*Contest
