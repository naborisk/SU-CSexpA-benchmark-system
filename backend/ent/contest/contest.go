// Code generated by ent, DO NOT EDIT.

package contest

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the contest type in the database.
	Label = "contest"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "year"
	// FieldQualifierStartAt holds the string denoting the qualifier_start_at field in the database.
	FieldQualifierStartAt = "qualifier_start_at"
	// FieldQualifierEndAt holds the string denoting the qualifier_end_at field in the database.
	FieldQualifierEndAt = "qualifier_end_at"
	// FieldQualifierSubmitLimit holds the string denoting the qualifier_submit_limit field in the database.
	FieldQualifierSubmitLimit = "qualifier_submit_limit"
	// FieldFinalStartAt holds the string denoting the final_start_at field in the database.
	FieldFinalStartAt = "final_start_at"
	// FieldFinalEndAt holds the string denoting the final_end_at field in the database.
	FieldFinalEndAt = "final_end_at"
	// FieldFinalSubmitLimit holds the string denoting the final_submit_limit field in the database.
	FieldFinalSubmitLimit = "final_submit_limit"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the contest in the database.
	Table = "contests"
)

// Columns holds all SQL columns for contest fields.
var Columns = []string{
	FieldID,
	FieldQualifierStartAt,
	FieldQualifierEndAt,
	FieldQualifierSubmitLimit,
	FieldFinalStartAt,
	FieldFinalEndAt,
	FieldFinalSubmitLimit,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int) error
)

// OrderOption defines the ordering options for the Contest queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByQualifierStartAt orders the results by the qualifier_start_at field.
func ByQualifierStartAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQualifierStartAt, opts...).ToFunc()
}

// ByQualifierEndAt orders the results by the qualifier_end_at field.
func ByQualifierEndAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQualifierEndAt, opts...).ToFunc()
}

// ByQualifierSubmitLimit orders the results by the qualifier_submit_limit field.
func ByQualifierSubmitLimit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQualifierSubmitLimit, opts...).ToFunc()
}

// ByFinalStartAt orders the results by the final_start_at field.
func ByFinalStartAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFinalStartAt, opts...).ToFunc()
}

// ByFinalEndAt orders the results by the final_end_at field.
func ByFinalEndAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFinalEndAt, opts...).ToFunc()
}

// ByFinalSubmitLimit orders the results by the final_submit_limit field.
func ByFinalSubmitLimit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFinalSubmitLimit, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
