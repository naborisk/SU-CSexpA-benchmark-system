// Code generated by ent, DO NOT EDIT.

package contest

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/ohkilab/SU-CSexpA-benchmark-system/backend/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Contest {
	return predicate.Contest(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Contest {
	return predicate.Contest(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Contest {
	return predicate.Contest(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Contest {
	return predicate.Contest(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Contest {
	return predicate.Contest(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Contest {
	return predicate.Contest(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Contest {
	return predicate.Contest(sql.FieldLTE(FieldID, id))
}

// QualifierStartAt applies equality check predicate on the "qualifier_start_at" field. It's identical to QualifierStartAtEQ.
func QualifierStartAt(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldQualifierStartAt, v))
}

// QualifierEndAt applies equality check predicate on the "qualifier_end_at" field. It's identical to QualifierEndAtEQ.
func QualifierEndAt(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldQualifierEndAt, v))
}

// QualifierSubmitLimit applies equality check predicate on the "qualifier_submit_limit" field. It's identical to QualifierSubmitLimitEQ.
func QualifierSubmitLimit(v int) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldQualifierSubmitLimit, v))
}

// FinalStartAt applies equality check predicate on the "final_start_at" field. It's identical to FinalStartAtEQ.
func FinalStartAt(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldFinalStartAt, v))
}

// FinalEndAt applies equality check predicate on the "final_end_at" field. It's identical to FinalEndAtEQ.
func FinalEndAt(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldFinalEndAt, v))
}

// FinalSubmitLimit applies equality check predicate on the "final_submit_limit" field. It's identical to FinalSubmitLimitEQ.
func FinalSubmitLimit(v int) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldFinalSubmitLimit, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldUpdatedAt, v))
}

// QualifierStartAtEQ applies the EQ predicate on the "qualifier_start_at" field.
func QualifierStartAtEQ(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldQualifierStartAt, v))
}

// QualifierStartAtNEQ applies the NEQ predicate on the "qualifier_start_at" field.
func QualifierStartAtNEQ(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldNEQ(FieldQualifierStartAt, v))
}

// QualifierStartAtIn applies the In predicate on the "qualifier_start_at" field.
func QualifierStartAtIn(vs ...time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldIn(FieldQualifierStartAt, vs...))
}

// QualifierStartAtNotIn applies the NotIn predicate on the "qualifier_start_at" field.
func QualifierStartAtNotIn(vs ...time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldNotIn(FieldQualifierStartAt, vs...))
}

// QualifierStartAtGT applies the GT predicate on the "qualifier_start_at" field.
func QualifierStartAtGT(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldGT(FieldQualifierStartAt, v))
}

// QualifierStartAtGTE applies the GTE predicate on the "qualifier_start_at" field.
func QualifierStartAtGTE(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldGTE(FieldQualifierStartAt, v))
}

// QualifierStartAtLT applies the LT predicate on the "qualifier_start_at" field.
func QualifierStartAtLT(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldLT(FieldQualifierStartAt, v))
}

// QualifierStartAtLTE applies the LTE predicate on the "qualifier_start_at" field.
func QualifierStartAtLTE(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldLTE(FieldQualifierStartAt, v))
}

// QualifierEndAtEQ applies the EQ predicate on the "qualifier_end_at" field.
func QualifierEndAtEQ(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldQualifierEndAt, v))
}

// QualifierEndAtNEQ applies the NEQ predicate on the "qualifier_end_at" field.
func QualifierEndAtNEQ(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldNEQ(FieldQualifierEndAt, v))
}

// QualifierEndAtIn applies the In predicate on the "qualifier_end_at" field.
func QualifierEndAtIn(vs ...time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldIn(FieldQualifierEndAt, vs...))
}

// QualifierEndAtNotIn applies the NotIn predicate on the "qualifier_end_at" field.
func QualifierEndAtNotIn(vs ...time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldNotIn(FieldQualifierEndAt, vs...))
}

// QualifierEndAtGT applies the GT predicate on the "qualifier_end_at" field.
func QualifierEndAtGT(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldGT(FieldQualifierEndAt, v))
}

// QualifierEndAtGTE applies the GTE predicate on the "qualifier_end_at" field.
func QualifierEndAtGTE(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldGTE(FieldQualifierEndAt, v))
}

// QualifierEndAtLT applies the LT predicate on the "qualifier_end_at" field.
func QualifierEndAtLT(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldLT(FieldQualifierEndAt, v))
}

// QualifierEndAtLTE applies the LTE predicate on the "qualifier_end_at" field.
func QualifierEndAtLTE(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldLTE(FieldQualifierEndAt, v))
}

// QualifierSubmitLimitEQ applies the EQ predicate on the "qualifier_submit_limit" field.
func QualifierSubmitLimitEQ(v int) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldQualifierSubmitLimit, v))
}

// QualifierSubmitLimitNEQ applies the NEQ predicate on the "qualifier_submit_limit" field.
func QualifierSubmitLimitNEQ(v int) predicate.Contest {
	return predicate.Contest(sql.FieldNEQ(FieldQualifierSubmitLimit, v))
}

// QualifierSubmitLimitIn applies the In predicate on the "qualifier_submit_limit" field.
func QualifierSubmitLimitIn(vs ...int) predicate.Contest {
	return predicate.Contest(sql.FieldIn(FieldQualifierSubmitLimit, vs...))
}

// QualifierSubmitLimitNotIn applies the NotIn predicate on the "qualifier_submit_limit" field.
func QualifierSubmitLimitNotIn(vs ...int) predicate.Contest {
	return predicate.Contest(sql.FieldNotIn(FieldQualifierSubmitLimit, vs...))
}

// QualifierSubmitLimitGT applies the GT predicate on the "qualifier_submit_limit" field.
func QualifierSubmitLimitGT(v int) predicate.Contest {
	return predicate.Contest(sql.FieldGT(FieldQualifierSubmitLimit, v))
}

// QualifierSubmitLimitGTE applies the GTE predicate on the "qualifier_submit_limit" field.
func QualifierSubmitLimitGTE(v int) predicate.Contest {
	return predicate.Contest(sql.FieldGTE(FieldQualifierSubmitLimit, v))
}

// QualifierSubmitLimitLT applies the LT predicate on the "qualifier_submit_limit" field.
func QualifierSubmitLimitLT(v int) predicate.Contest {
	return predicate.Contest(sql.FieldLT(FieldQualifierSubmitLimit, v))
}

// QualifierSubmitLimitLTE applies the LTE predicate on the "qualifier_submit_limit" field.
func QualifierSubmitLimitLTE(v int) predicate.Contest {
	return predicate.Contest(sql.FieldLTE(FieldQualifierSubmitLimit, v))
}

// FinalStartAtEQ applies the EQ predicate on the "final_start_at" field.
func FinalStartAtEQ(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldFinalStartAt, v))
}

// FinalStartAtNEQ applies the NEQ predicate on the "final_start_at" field.
func FinalStartAtNEQ(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldNEQ(FieldFinalStartAt, v))
}

// FinalStartAtIn applies the In predicate on the "final_start_at" field.
func FinalStartAtIn(vs ...time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldIn(FieldFinalStartAt, vs...))
}

// FinalStartAtNotIn applies the NotIn predicate on the "final_start_at" field.
func FinalStartAtNotIn(vs ...time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldNotIn(FieldFinalStartAt, vs...))
}

// FinalStartAtGT applies the GT predicate on the "final_start_at" field.
func FinalStartAtGT(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldGT(FieldFinalStartAt, v))
}

// FinalStartAtGTE applies the GTE predicate on the "final_start_at" field.
func FinalStartAtGTE(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldGTE(FieldFinalStartAt, v))
}

// FinalStartAtLT applies the LT predicate on the "final_start_at" field.
func FinalStartAtLT(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldLT(FieldFinalStartAt, v))
}

// FinalStartAtLTE applies the LTE predicate on the "final_start_at" field.
func FinalStartAtLTE(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldLTE(FieldFinalStartAt, v))
}

// FinalEndAtEQ applies the EQ predicate on the "final_end_at" field.
func FinalEndAtEQ(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldFinalEndAt, v))
}

// FinalEndAtNEQ applies the NEQ predicate on the "final_end_at" field.
func FinalEndAtNEQ(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldNEQ(FieldFinalEndAt, v))
}

// FinalEndAtIn applies the In predicate on the "final_end_at" field.
func FinalEndAtIn(vs ...time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldIn(FieldFinalEndAt, vs...))
}

// FinalEndAtNotIn applies the NotIn predicate on the "final_end_at" field.
func FinalEndAtNotIn(vs ...time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldNotIn(FieldFinalEndAt, vs...))
}

// FinalEndAtGT applies the GT predicate on the "final_end_at" field.
func FinalEndAtGT(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldGT(FieldFinalEndAt, v))
}

// FinalEndAtGTE applies the GTE predicate on the "final_end_at" field.
func FinalEndAtGTE(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldGTE(FieldFinalEndAt, v))
}

// FinalEndAtLT applies the LT predicate on the "final_end_at" field.
func FinalEndAtLT(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldLT(FieldFinalEndAt, v))
}

// FinalEndAtLTE applies the LTE predicate on the "final_end_at" field.
func FinalEndAtLTE(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldLTE(FieldFinalEndAt, v))
}

// FinalSubmitLimitEQ applies the EQ predicate on the "final_submit_limit" field.
func FinalSubmitLimitEQ(v int) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldFinalSubmitLimit, v))
}

// FinalSubmitLimitNEQ applies the NEQ predicate on the "final_submit_limit" field.
func FinalSubmitLimitNEQ(v int) predicate.Contest {
	return predicate.Contest(sql.FieldNEQ(FieldFinalSubmitLimit, v))
}

// FinalSubmitLimitIn applies the In predicate on the "final_submit_limit" field.
func FinalSubmitLimitIn(vs ...int) predicate.Contest {
	return predicate.Contest(sql.FieldIn(FieldFinalSubmitLimit, vs...))
}

// FinalSubmitLimitNotIn applies the NotIn predicate on the "final_submit_limit" field.
func FinalSubmitLimitNotIn(vs ...int) predicate.Contest {
	return predicate.Contest(sql.FieldNotIn(FieldFinalSubmitLimit, vs...))
}

// FinalSubmitLimitGT applies the GT predicate on the "final_submit_limit" field.
func FinalSubmitLimitGT(v int) predicate.Contest {
	return predicate.Contest(sql.FieldGT(FieldFinalSubmitLimit, v))
}

// FinalSubmitLimitGTE applies the GTE predicate on the "final_submit_limit" field.
func FinalSubmitLimitGTE(v int) predicate.Contest {
	return predicate.Contest(sql.FieldGTE(FieldFinalSubmitLimit, v))
}

// FinalSubmitLimitLT applies the LT predicate on the "final_submit_limit" field.
func FinalSubmitLimitLT(v int) predicate.Contest {
	return predicate.Contest(sql.FieldLT(FieldFinalSubmitLimit, v))
}

// FinalSubmitLimitLTE applies the LTE predicate on the "final_submit_limit" field.
func FinalSubmitLimitLTE(v int) predicate.Contest {
	return predicate.Contest(sql.FieldLTE(FieldFinalSubmitLimit, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Contest {
	return predicate.Contest(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Contest {
	return predicate.Contest(sql.FieldNotNull(FieldUpdatedAt))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Contest) predicate.Contest {
	return predicate.Contest(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Contest) predicate.Contest {
	return predicate.Contest(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Contest) predicate.Contest {
	return predicate.Contest(func(s *sql.Selector) {
		p(s.Not())
	})
}
