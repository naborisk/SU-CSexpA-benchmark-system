// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ohkilab/SU-CSexpA-benchmark-system/backend/ent/contest"
	"github.com/ohkilab/SU-CSexpA-benchmark-system/backend/ent/group"
	"github.com/ohkilab/SU-CSexpA-benchmark-system/backend/ent/predicate"
	"github.com/ohkilab/SU-CSexpA-benchmark-system/backend/ent/submit"
	"github.com/ohkilab/SU-CSexpA-benchmark-system/backend/ent/tagresult"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeContest   = "Contest"
	TypeGroup     = "Group"
	TypeSubmit    = "Submit"
	TypeTagResult = "TagResult"
)

// ContestMutation represents an operation that mutates the Contest nodes in the graph.
type ContestMutation struct {
	config
	op                        Op
	typ                       string
	id                        *int
	qualifier_start_at        *time.Time
	qualifier_end_at          *time.Time
	qualifier_submit_limit    *int
	addqualifier_submit_limit *int
	final_start_at            *time.Time
	final_end_at              *time.Time
	final_submit_limit        *int
	addfinal_submit_limit     *int
	updated_at                *time.Time
	clearedFields             map[string]struct{}
	done                      bool
	oldValue                  func(context.Context) (*Contest, error)
	predicates                []predicate.Contest
}

var _ ent.Mutation = (*ContestMutation)(nil)

// contestOption allows management of the mutation configuration using functional options.
type contestOption func(*ContestMutation)

// newContestMutation creates new mutation for the Contest entity.
func newContestMutation(c config, op Op, opts ...contestOption) *ContestMutation {
	m := &ContestMutation{
		config:        c,
		op:            op,
		typ:           TypeContest,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withContestID sets the ID field of the mutation.
func withContestID(id int) contestOption {
	return func(m *ContestMutation) {
		var (
			err   error
			once  sync.Once
			value *Contest
		)
		m.oldValue = func(ctx context.Context) (*Contest, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Contest.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withContest sets the old Contest of the mutation.
func withContest(node *Contest) contestOption {
	return func(m *ContestMutation) {
		m.oldValue = func(context.Context) (*Contest, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ContestMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ContestMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Contest entities.
func (m *ContestMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ContestMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ContestMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Contest.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetQualifierStartAt sets the "qualifier_start_at" field.
func (m *ContestMutation) SetQualifierStartAt(t time.Time) {
	m.qualifier_start_at = &t
}

// QualifierStartAt returns the value of the "qualifier_start_at" field in the mutation.
func (m *ContestMutation) QualifierStartAt() (r time.Time, exists bool) {
	v := m.qualifier_start_at
	if v == nil {
		return
	}
	return *v, true
}

// OldQualifierStartAt returns the old "qualifier_start_at" field's value of the Contest entity.
// If the Contest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContestMutation) OldQualifierStartAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldQualifierStartAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldQualifierStartAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQualifierStartAt: %w", err)
	}
	return oldValue.QualifierStartAt, nil
}

// ResetQualifierStartAt resets all changes to the "qualifier_start_at" field.
func (m *ContestMutation) ResetQualifierStartAt() {
	m.qualifier_start_at = nil
}

// SetQualifierEndAt sets the "qualifier_end_at" field.
func (m *ContestMutation) SetQualifierEndAt(t time.Time) {
	m.qualifier_end_at = &t
}

// QualifierEndAt returns the value of the "qualifier_end_at" field in the mutation.
func (m *ContestMutation) QualifierEndAt() (r time.Time, exists bool) {
	v := m.qualifier_end_at
	if v == nil {
		return
	}
	return *v, true
}

// OldQualifierEndAt returns the old "qualifier_end_at" field's value of the Contest entity.
// If the Contest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContestMutation) OldQualifierEndAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldQualifierEndAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldQualifierEndAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQualifierEndAt: %w", err)
	}
	return oldValue.QualifierEndAt, nil
}

// ResetQualifierEndAt resets all changes to the "qualifier_end_at" field.
func (m *ContestMutation) ResetQualifierEndAt() {
	m.qualifier_end_at = nil
}

// SetQualifierSubmitLimit sets the "qualifier_submit_limit" field.
func (m *ContestMutation) SetQualifierSubmitLimit(i int) {
	m.qualifier_submit_limit = &i
	m.addqualifier_submit_limit = nil
}

// QualifierSubmitLimit returns the value of the "qualifier_submit_limit" field in the mutation.
func (m *ContestMutation) QualifierSubmitLimit() (r int, exists bool) {
	v := m.qualifier_submit_limit
	if v == nil {
		return
	}
	return *v, true
}

// OldQualifierSubmitLimit returns the old "qualifier_submit_limit" field's value of the Contest entity.
// If the Contest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContestMutation) OldQualifierSubmitLimit(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldQualifierSubmitLimit is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldQualifierSubmitLimit requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQualifierSubmitLimit: %w", err)
	}
	return oldValue.QualifierSubmitLimit, nil
}

// AddQualifierSubmitLimit adds i to the "qualifier_submit_limit" field.
func (m *ContestMutation) AddQualifierSubmitLimit(i int) {
	if m.addqualifier_submit_limit != nil {
		*m.addqualifier_submit_limit += i
	} else {
		m.addqualifier_submit_limit = &i
	}
}

// AddedQualifierSubmitLimit returns the value that was added to the "qualifier_submit_limit" field in this mutation.
func (m *ContestMutation) AddedQualifierSubmitLimit() (r int, exists bool) {
	v := m.addqualifier_submit_limit
	if v == nil {
		return
	}
	return *v, true
}

// ResetQualifierSubmitLimit resets all changes to the "qualifier_submit_limit" field.
func (m *ContestMutation) ResetQualifierSubmitLimit() {
	m.qualifier_submit_limit = nil
	m.addqualifier_submit_limit = nil
}

// SetFinalStartAt sets the "final_start_at" field.
func (m *ContestMutation) SetFinalStartAt(t time.Time) {
	m.final_start_at = &t
}

// FinalStartAt returns the value of the "final_start_at" field in the mutation.
func (m *ContestMutation) FinalStartAt() (r time.Time, exists bool) {
	v := m.final_start_at
	if v == nil {
		return
	}
	return *v, true
}

// OldFinalStartAt returns the old "final_start_at" field's value of the Contest entity.
// If the Contest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContestMutation) OldFinalStartAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFinalStartAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFinalStartAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFinalStartAt: %w", err)
	}
	return oldValue.FinalStartAt, nil
}

// ResetFinalStartAt resets all changes to the "final_start_at" field.
func (m *ContestMutation) ResetFinalStartAt() {
	m.final_start_at = nil
}

// SetFinalEndAt sets the "final_end_at" field.
func (m *ContestMutation) SetFinalEndAt(t time.Time) {
	m.final_end_at = &t
}

// FinalEndAt returns the value of the "final_end_at" field in the mutation.
func (m *ContestMutation) FinalEndAt() (r time.Time, exists bool) {
	v := m.final_end_at
	if v == nil {
		return
	}
	return *v, true
}

// OldFinalEndAt returns the old "final_end_at" field's value of the Contest entity.
// If the Contest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContestMutation) OldFinalEndAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFinalEndAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFinalEndAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFinalEndAt: %w", err)
	}
	return oldValue.FinalEndAt, nil
}

// ResetFinalEndAt resets all changes to the "final_end_at" field.
func (m *ContestMutation) ResetFinalEndAt() {
	m.final_end_at = nil
}

// SetFinalSubmitLimit sets the "final_submit_limit" field.
func (m *ContestMutation) SetFinalSubmitLimit(i int) {
	m.final_submit_limit = &i
	m.addfinal_submit_limit = nil
}

// FinalSubmitLimit returns the value of the "final_submit_limit" field in the mutation.
func (m *ContestMutation) FinalSubmitLimit() (r int, exists bool) {
	v := m.final_submit_limit
	if v == nil {
		return
	}
	return *v, true
}

// OldFinalSubmitLimit returns the old "final_submit_limit" field's value of the Contest entity.
// If the Contest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContestMutation) OldFinalSubmitLimit(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFinalSubmitLimit is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFinalSubmitLimit requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFinalSubmitLimit: %w", err)
	}
	return oldValue.FinalSubmitLimit, nil
}

// AddFinalSubmitLimit adds i to the "final_submit_limit" field.
func (m *ContestMutation) AddFinalSubmitLimit(i int) {
	if m.addfinal_submit_limit != nil {
		*m.addfinal_submit_limit += i
	} else {
		m.addfinal_submit_limit = &i
	}
}

// AddedFinalSubmitLimit returns the value that was added to the "final_submit_limit" field in this mutation.
func (m *ContestMutation) AddedFinalSubmitLimit() (r int, exists bool) {
	v := m.addfinal_submit_limit
	if v == nil {
		return
	}
	return *v, true
}

// ResetFinalSubmitLimit resets all changes to the "final_submit_limit" field.
func (m *ContestMutation) ResetFinalSubmitLimit() {
	m.final_submit_limit = nil
	m.addfinal_submit_limit = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ContestMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ContestMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Contest entity.
// If the Contest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContestMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *ContestMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[contest.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *ContestMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[contest.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ContestMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, contest.FieldUpdatedAt)
}

// Where appends a list predicates to the ContestMutation builder.
func (m *ContestMutation) Where(ps ...predicate.Contest) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ContestMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ContestMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Contest, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ContestMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ContestMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Contest).
func (m *ContestMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ContestMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.qualifier_start_at != nil {
		fields = append(fields, contest.FieldQualifierStartAt)
	}
	if m.qualifier_end_at != nil {
		fields = append(fields, contest.FieldQualifierEndAt)
	}
	if m.qualifier_submit_limit != nil {
		fields = append(fields, contest.FieldQualifierSubmitLimit)
	}
	if m.final_start_at != nil {
		fields = append(fields, contest.FieldFinalStartAt)
	}
	if m.final_end_at != nil {
		fields = append(fields, contest.FieldFinalEndAt)
	}
	if m.final_submit_limit != nil {
		fields = append(fields, contest.FieldFinalSubmitLimit)
	}
	if m.updated_at != nil {
		fields = append(fields, contest.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ContestMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case contest.FieldQualifierStartAt:
		return m.QualifierStartAt()
	case contest.FieldQualifierEndAt:
		return m.QualifierEndAt()
	case contest.FieldQualifierSubmitLimit:
		return m.QualifierSubmitLimit()
	case contest.FieldFinalStartAt:
		return m.FinalStartAt()
	case contest.FieldFinalEndAt:
		return m.FinalEndAt()
	case contest.FieldFinalSubmitLimit:
		return m.FinalSubmitLimit()
	case contest.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ContestMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case contest.FieldQualifierStartAt:
		return m.OldQualifierStartAt(ctx)
	case contest.FieldQualifierEndAt:
		return m.OldQualifierEndAt(ctx)
	case contest.FieldQualifierSubmitLimit:
		return m.OldQualifierSubmitLimit(ctx)
	case contest.FieldFinalStartAt:
		return m.OldFinalStartAt(ctx)
	case contest.FieldFinalEndAt:
		return m.OldFinalEndAt(ctx)
	case contest.FieldFinalSubmitLimit:
		return m.OldFinalSubmitLimit(ctx)
	case contest.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Contest field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ContestMutation) SetField(name string, value ent.Value) error {
	switch name {
	case contest.FieldQualifierStartAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQualifierStartAt(v)
		return nil
	case contest.FieldQualifierEndAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQualifierEndAt(v)
		return nil
	case contest.FieldQualifierSubmitLimit:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQualifierSubmitLimit(v)
		return nil
	case contest.FieldFinalStartAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFinalStartAt(v)
		return nil
	case contest.FieldFinalEndAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFinalEndAt(v)
		return nil
	case contest.FieldFinalSubmitLimit:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFinalSubmitLimit(v)
		return nil
	case contest.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Contest field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ContestMutation) AddedFields() []string {
	var fields []string
	if m.addqualifier_submit_limit != nil {
		fields = append(fields, contest.FieldQualifierSubmitLimit)
	}
	if m.addfinal_submit_limit != nil {
		fields = append(fields, contest.FieldFinalSubmitLimit)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ContestMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case contest.FieldQualifierSubmitLimit:
		return m.AddedQualifierSubmitLimit()
	case contest.FieldFinalSubmitLimit:
		return m.AddedFinalSubmitLimit()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ContestMutation) AddField(name string, value ent.Value) error {
	switch name {
	case contest.FieldQualifierSubmitLimit:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddQualifierSubmitLimit(v)
		return nil
	case contest.FieldFinalSubmitLimit:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFinalSubmitLimit(v)
		return nil
	}
	return fmt.Errorf("unknown Contest numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ContestMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(contest.FieldUpdatedAt) {
		fields = append(fields, contest.FieldUpdatedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ContestMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ContestMutation) ClearField(name string) error {
	switch name {
	case contest.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Contest nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ContestMutation) ResetField(name string) error {
	switch name {
	case contest.FieldQualifierStartAt:
		m.ResetQualifierStartAt()
		return nil
	case contest.FieldQualifierEndAt:
		m.ResetQualifierEndAt()
		return nil
	case contest.FieldQualifierSubmitLimit:
		m.ResetQualifierSubmitLimit()
		return nil
	case contest.FieldFinalStartAt:
		m.ResetFinalStartAt()
		return nil
	case contest.FieldFinalEndAt:
		m.ResetFinalEndAt()
		return nil
	case contest.FieldFinalSubmitLimit:
		m.ResetFinalSubmitLimit()
		return nil
	case contest.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Contest field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ContestMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ContestMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ContestMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ContestMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ContestMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ContestMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ContestMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Contest unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ContestMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Contest edge %s", name)
}

// GroupMutation represents an operation that mutates the Group nodes in the graph.
type GroupMutation struct {
	config
	op             Op
	typ            string
	id             *string
	year           *int
	addyear        *int
	role           *group.Role
	clearedFields  map[string]struct{}
	submits        map[string]struct{}
	removedsubmits map[string]struct{}
	clearedsubmits bool
	done           bool
	oldValue       func(context.Context) (*Group, error)
	predicates     []predicate.Group
}

var _ ent.Mutation = (*GroupMutation)(nil)

// groupOption allows management of the mutation configuration using functional options.
type groupOption func(*GroupMutation)

// newGroupMutation creates new mutation for the Group entity.
func newGroupMutation(c config, op Op, opts ...groupOption) *GroupMutation {
	m := &GroupMutation{
		config:        c,
		op:            op,
		typ:           TypeGroup,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGroupID sets the ID field of the mutation.
func withGroupID(id string) groupOption {
	return func(m *GroupMutation) {
		var (
			err   error
			once  sync.Once
			value *Group
		)
		m.oldValue = func(ctx context.Context) (*Group, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Group.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGroup sets the old Group of the mutation.
func withGroup(node *Group) groupOption {
	return func(m *GroupMutation) {
		m.oldValue = func(context.Context) (*Group, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GroupMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GroupMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Group entities.
func (m *GroupMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GroupMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GroupMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Group.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetYear sets the "year" field.
func (m *GroupMutation) SetYear(i int) {
	m.year = &i
	m.addyear = nil
}

// Year returns the value of the "year" field in the mutation.
func (m *GroupMutation) Year() (r int, exists bool) {
	v := m.year
	if v == nil {
		return
	}
	return *v, true
}

// OldYear returns the old "year" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldYear(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldYear is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldYear requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldYear: %w", err)
	}
	return oldValue.Year, nil
}

// AddYear adds i to the "year" field.
func (m *GroupMutation) AddYear(i int) {
	if m.addyear != nil {
		*m.addyear += i
	} else {
		m.addyear = &i
	}
}

// AddedYear returns the value that was added to the "year" field in this mutation.
func (m *GroupMutation) AddedYear() (r int, exists bool) {
	v := m.addyear
	if v == nil {
		return
	}
	return *v, true
}

// ResetYear resets all changes to the "year" field.
func (m *GroupMutation) ResetYear() {
	m.year = nil
	m.addyear = nil
}

// SetRole sets the "role" field.
func (m *GroupMutation) SetRole(gr group.Role) {
	m.role = &gr
}

// Role returns the value of the "role" field in the mutation.
func (m *GroupMutation) Role() (r group.Role, exists bool) {
	v := m.role
	if v == nil {
		return
	}
	return *v, true
}

// OldRole returns the old "role" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldRole(ctx context.Context) (v group.Role, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRole is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRole requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRole: %w", err)
	}
	return oldValue.Role, nil
}

// ResetRole resets all changes to the "role" field.
func (m *GroupMutation) ResetRole() {
	m.role = nil
}

// AddSubmitIDs adds the "submits" edge to the Submit entity by ids.
func (m *GroupMutation) AddSubmitIDs(ids ...string) {
	if m.submits == nil {
		m.submits = make(map[string]struct{})
	}
	for i := range ids {
		m.submits[ids[i]] = struct{}{}
	}
}

// ClearSubmits clears the "submits" edge to the Submit entity.
func (m *GroupMutation) ClearSubmits() {
	m.clearedsubmits = true
}

// SubmitsCleared reports if the "submits" edge to the Submit entity was cleared.
func (m *GroupMutation) SubmitsCleared() bool {
	return m.clearedsubmits
}

// RemoveSubmitIDs removes the "submits" edge to the Submit entity by IDs.
func (m *GroupMutation) RemoveSubmitIDs(ids ...string) {
	if m.removedsubmits == nil {
		m.removedsubmits = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.submits, ids[i])
		m.removedsubmits[ids[i]] = struct{}{}
	}
}

// RemovedSubmits returns the removed IDs of the "submits" edge to the Submit entity.
func (m *GroupMutation) RemovedSubmitsIDs() (ids []string) {
	for id := range m.removedsubmits {
		ids = append(ids, id)
	}
	return
}

// SubmitsIDs returns the "submits" edge IDs in the mutation.
func (m *GroupMutation) SubmitsIDs() (ids []string) {
	for id := range m.submits {
		ids = append(ids, id)
	}
	return
}

// ResetSubmits resets all changes to the "submits" edge.
func (m *GroupMutation) ResetSubmits() {
	m.submits = nil
	m.clearedsubmits = false
	m.removedsubmits = nil
}

// Where appends a list predicates to the GroupMutation builder.
func (m *GroupMutation) Where(ps ...predicate.Group) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GroupMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GroupMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Group, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GroupMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GroupMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Group).
func (m *GroupMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GroupMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.year != nil {
		fields = append(fields, group.FieldYear)
	}
	if m.role != nil {
		fields = append(fields, group.FieldRole)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GroupMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case group.FieldYear:
		return m.Year()
	case group.FieldRole:
		return m.Role()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GroupMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case group.FieldYear:
		return m.OldYear(ctx)
	case group.FieldRole:
		return m.OldRole(ctx)
	}
	return nil, fmt.Errorf("unknown Group field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupMutation) SetField(name string, value ent.Value) error {
	switch name {
	case group.FieldYear:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetYear(v)
		return nil
	case group.FieldRole:
		v, ok := value.(group.Role)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRole(v)
		return nil
	}
	return fmt.Errorf("unknown Group field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GroupMutation) AddedFields() []string {
	var fields []string
	if m.addyear != nil {
		fields = append(fields, group.FieldYear)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GroupMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case group.FieldYear:
		return m.AddedYear()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupMutation) AddField(name string, value ent.Value) error {
	switch name {
	case group.FieldYear:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddYear(v)
		return nil
	}
	return fmt.Errorf("unknown Group numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GroupMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GroupMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GroupMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Group nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GroupMutation) ResetField(name string) error {
	switch name {
	case group.FieldYear:
		m.ResetYear()
		return nil
	case group.FieldRole:
		m.ResetRole()
		return nil
	}
	return fmt.Errorf("unknown Group field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GroupMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.submits != nil {
		edges = append(edges, group.EdgeSubmits)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GroupMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case group.EdgeSubmits:
		ids := make([]ent.Value, 0, len(m.submits))
		for id := range m.submits {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GroupMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedsubmits != nil {
		edges = append(edges, group.EdgeSubmits)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GroupMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case group.EdgeSubmits:
		ids := make([]ent.Value, 0, len(m.removedsubmits))
		for id := range m.removedsubmits {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GroupMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedsubmits {
		edges = append(edges, group.EdgeSubmits)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GroupMutation) EdgeCleared(name string) bool {
	switch name {
	case group.EdgeSubmits:
		return m.clearedsubmits
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GroupMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Group unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GroupMutation) ResetEdge(name string) error {
	switch name {
	case group.EdgeSubmits:
		m.ResetSubmits()
		return nil
	}
	return fmt.Errorf("unknown Group edge %s", name)
}

// SubmitMutation represents an operation that mutates the Submit nodes in the graph.
type SubmitMutation struct {
	config
	op                Op
	typ               string
	id                *string
	year              *int
	addyear           *int
	score             *int
	addscore          *int
	language          *submit.Language
	submited_at       *time.Time
	completed_at      *time.Time
	updated_at        *time.Time
	clearedFields     map[string]struct{}
	tagResults        map[int]struct{}
	removedtagResults map[int]struct{}
	clearedtagResults bool
	group             map[string]struct{}
	removedgroup      map[string]struct{}
	clearedgroup      bool
	done              bool
	oldValue          func(context.Context) (*Submit, error)
	predicates        []predicate.Submit
}

var _ ent.Mutation = (*SubmitMutation)(nil)

// submitOption allows management of the mutation configuration using functional options.
type submitOption func(*SubmitMutation)

// newSubmitMutation creates new mutation for the Submit entity.
func newSubmitMutation(c config, op Op, opts ...submitOption) *SubmitMutation {
	m := &SubmitMutation{
		config:        c,
		op:            op,
		typ:           TypeSubmit,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSubmitID sets the ID field of the mutation.
func withSubmitID(id string) submitOption {
	return func(m *SubmitMutation) {
		var (
			err   error
			once  sync.Once
			value *Submit
		)
		m.oldValue = func(ctx context.Context) (*Submit, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Submit.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSubmit sets the old Submit of the mutation.
func withSubmit(node *Submit) submitOption {
	return func(m *SubmitMutation) {
		m.oldValue = func(context.Context) (*Submit, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SubmitMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SubmitMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Submit entities.
func (m *SubmitMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SubmitMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SubmitMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Submit.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetYear sets the "year" field.
func (m *SubmitMutation) SetYear(i int) {
	m.year = &i
	m.addyear = nil
}

// Year returns the value of the "year" field in the mutation.
func (m *SubmitMutation) Year() (r int, exists bool) {
	v := m.year
	if v == nil {
		return
	}
	return *v, true
}

// OldYear returns the old "year" field's value of the Submit entity.
// If the Submit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubmitMutation) OldYear(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldYear is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldYear requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldYear: %w", err)
	}
	return oldValue.Year, nil
}

// AddYear adds i to the "year" field.
func (m *SubmitMutation) AddYear(i int) {
	if m.addyear != nil {
		*m.addyear += i
	} else {
		m.addyear = &i
	}
}

// AddedYear returns the value that was added to the "year" field in this mutation.
func (m *SubmitMutation) AddedYear() (r int, exists bool) {
	v := m.addyear
	if v == nil {
		return
	}
	return *v, true
}

// ResetYear resets all changes to the "year" field.
func (m *SubmitMutation) ResetYear() {
	m.year = nil
	m.addyear = nil
}

// SetScore sets the "score" field.
func (m *SubmitMutation) SetScore(i int) {
	m.score = &i
	m.addscore = nil
}

// Score returns the value of the "score" field in the mutation.
func (m *SubmitMutation) Score() (r int, exists bool) {
	v := m.score
	if v == nil {
		return
	}
	return *v, true
}

// OldScore returns the old "score" field's value of the Submit entity.
// If the Submit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubmitMutation) OldScore(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScore is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScore requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScore: %w", err)
	}
	return oldValue.Score, nil
}

// AddScore adds i to the "score" field.
func (m *SubmitMutation) AddScore(i int) {
	if m.addscore != nil {
		*m.addscore += i
	} else {
		m.addscore = &i
	}
}

// AddedScore returns the value that was added to the "score" field in this mutation.
func (m *SubmitMutation) AddedScore() (r int, exists bool) {
	v := m.addscore
	if v == nil {
		return
	}
	return *v, true
}

// ResetScore resets all changes to the "score" field.
func (m *SubmitMutation) ResetScore() {
	m.score = nil
	m.addscore = nil
}

// SetLanguage sets the "language" field.
func (m *SubmitMutation) SetLanguage(s submit.Language) {
	m.language = &s
}

// Language returns the value of the "language" field in the mutation.
func (m *SubmitMutation) Language() (r submit.Language, exists bool) {
	v := m.language
	if v == nil {
		return
	}
	return *v, true
}

// OldLanguage returns the old "language" field's value of the Submit entity.
// If the Submit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubmitMutation) OldLanguage(ctx context.Context) (v submit.Language, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLanguage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLanguage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLanguage: %w", err)
	}
	return oldValue.Language, nil
}

// ResetLanguage resets all changes to the "language" field.
func (m *SubmitMutation) ResetLanguage() {
	m.language = nil
}

// SetSubmitedAt sets the "submited_at" field.
func (m *SubmitMutation) SetSubmitedAt(t time.Time) {
	m.submited_at = &t
}

// SubmitedAt returns the value of the "submited_at" field in the mutation.
func (m *SubmitMutation) SubmitedAt() (r time.Time, exists bool) {
	v := m.submited_at
	if v == nil {
		return
	}
	return *v, true
}

// OldSubmitedAt returns the old "submited_at" field's value of the Submit entity.
// If the Submit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubmitMutation) OldSubmitedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubmitedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubmitedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubmitedAt: %w", err)
	}
	return oldValue.SubmitedAt, nil
}

// ResetSubmitedAt resets all changes to the "submited_at" field.
func (m *SubmitMutation) ResetSubmitedAt() {
	m.submited_at = nil
}

// SetCompletedAt sets the "completed_at" field.
func (m *SubmitMutation) SetCompletedAt(t time.Time) {
	m.completed_at = &t
}

// CompletedAt returns the value of the "completed_at" field in the mutation.
func (m *SubmitMutation) CompletedAt() (r time.Time, exists bool) {
	v := m.completed_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCompletedAt returns the old "completed_at" field's value of the Submit entity.
// If the Submit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubmitMutation) OldCompletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCompletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCompletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCompletedAt: %w", err)
	}
	return oldValue.CompletedAt, nil
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (m *SubmitMutation) ClearCompletedAt() {
	m.completed_at = nil
	m.clearedFields[submit.FieldCompletedAt] = struct{}{}
}

// CompletedAtCleared returns if the "completed_at" field was cleared in this mutation.
func (m *SubmitMutation) CompletedAtCleared() bool {
	_, ok := m.clearedFields[submit.FieldCompletedAt]
	return ok
}

// ResetCompletedAt resets all changes to the "completed_at" field.
func (m *SubmitMutation) ResetCompletedAt() {
	m.completed_at = nil
	delete(m.clearedFields, submit.FieldCompletedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SubmitMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SubmitMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Submit entity.
// If the Submit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubmitMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *SubmitMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[submit.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *SubmitMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[submit.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SubmitMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, submit.FieldUpdatedAt)
}

// AddTagResultIDs adds the "tagResults" edge to the TagResult entity by ids.
func (m *SubmitMutation) AddTagResultIDs(ids ...int) {
	if m.tagResults == nil {
		m.tagResults = make(map[int]struct{})
	}
	for i := range ids {
		m.tagResults[ids[i]] = struct{}{}
	}
}

// ClearTagResults clears the "tagResults" edge to the TagResult entity.
func (m *SubmitMutation) ClearTagResults() {
	m.clearedtagResults = true
}

// TagResultsCleared reports if the "tagResults" edge to the TagResult entity was cleared.
func (m *SubmitMutation) TagResultsCleared() bool {
	return m.clearedtagResults
}

// RemoveTagResultIDs removes the "tagResults" edge to the TagResult entity by IDs.
func (m *SubmitMutation) RemoveTagResultIDs(ids ...int) {
	if m.removedtagResults == nil {
		m.removedtagResults = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.tagResults, ids[i])
		m.removedtagResults[ids[i]] = struct{}{}
	}
}

// RemovedTagResults returns the removed IDs of the "tagResults" edge to the TagResult entity.
func (m *SubmitMutation) RemovedTagResultsIDs() (ids []int) {
	for id := range m.removedtagResults {
		ids = append(ids, id)
	}
	return
}

// TagResultsIDs returns the "tagResults" edge IDs in the mutation.
func (m *SubmitMutation) TagResultsIDs() (ids []int) {
	for id := range m.tagResults {
		ids = append(ids, id)
	}
	return
}

// ResetTagResults resets all changes to the "tagResults" edge.
func (m *SubmitMutation) ResetTagResults() {
	m.tagResults = nil
	m.clearedtagResults = false
	m.removedtagResults = nil
}

// AddGroupIDs adds the "group" edge to the Group entity by ids.
func (m *SubmitMutation) AddGroupIDs(ids ...string) {
	if m.group == nil {
		m.group = make(map[string]struct{})
	}
	for i := range ids {
		m.group[ids[i]] = struct{}{}
	}
}

// ClearGroup clears the "group" edge to the Group entity.
func (m *SubmitMutation) ClearGroup() {
	m.clearedgroup = true
}

// GroupCleared reports if the "group" edge to the Group entity was cleared.
func (m *SubmitMutation) GroupCleared() bool {
	return m.clearedgroup
}

// RemoveGroupIDs removes the "group" edge to the Group entity by IDs.
func (m *SubmitMutation) RemoveGroupIDs(ids ...string) {
	if m.removedgroup == nil {
		m.removedgroup = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.group, ids[i])
		m.removedgroup[ids[i]] = struct{}{}
	}
}

// RemovedGroup returns the removed IDs of the "group" edge to the Group entity.
func (m *SubmitMutation) RemovedGroupIDs() (ids []string) {
	for id := range m.removedgroup {
		ids = append(ids, id)
	}
	return
}

// GroupIDs returns the "group" edge IDs in the mutation.
func (m *SubmitMutation) GroupIDs() (ids []string) {
	for id := range m.group {
		ids = append(ids, id)
	}
	return
}

// ResetGroup resets all changes to the "group" edge.
func (m *SubmitMutation) ResetGroup() {
	m.group = nil
	m.clearedgroup = false
	m.removedgroup = nil
}

// Where appends a list predicates to the SubmitMutation builder.
func (m *SubmitMutation) Where(ps ...predicate.Submit) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SubmitMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SubmitMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Submit, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SubmitMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SubmitMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Submit).
func (m *SubmitMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SubmitMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.year != nil {
		fields = append(fields, submit.FieldYear)
	}
	if m.score != nil {
		fields = append(fields, submit.FieldScore)
	}
	if m.language != nil {
		fields = append(fields, submit.FieldLanguage)
	}
	if m.submited_at != nil {
		fields = append(fields, submit.FieldSubmitedAt)
	}
	if m.completed_at != nil {
		fields = append(fields, submit.FieldCompletedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, submit.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SubmitMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case submit.FieldYear:
		return m.Year()
	case submit.FieldScore:
		return m.Score()
	case submit.FieldLanguage:
		return m.Language()
	case submit.FieldSubmitedAt:
		return m.SubmitedAt()
	case submit.FieldCompletedAt:
		return m.CompletedAt()
	case submit.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SubmitMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case submit.FieldYear:
		return m.OldYear(ctx)
	case submit.FieldScore:
		return m.OldScore(ctx)
	case submit.FieldLanguage:
		return m.OldLanguage(ctx)
	case submit.FieldSubmitedAt:
		return m.OldSubmitedAt(ctx)
	case submit.FieldCompletedAt:
		return m.OldCompletedAt(ctx)
	case submit.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Submit field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SubmitMutation) SetField(name string, value ent.Value) error {
	switch name {
	case submit.FieldYear:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetYear(v)
		return nil
	case submit.FieldScore:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScore(v)
		return nil
	case submit.FieldLanguage:
		v, ok := value.(submit.Language)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLanguage(v)
		return nil
	case submit.FieldSubmitedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubmitedAt(v)
		return nil
	case submit.FieldCompletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCompletedAt(v)
		return nil
	case submit.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Submit field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SubmitMutation) AddedFields() []string {
	var fields []string
	if m.addyear != nil {
		fields = append(fields, submit.FieldYear)
	}
	if m.addscore != nil {
		fields = append(fields, submit.FieldScore)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SubmitMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case submit.FieldYear:
		return m.AddedYear()
	case submit.FieldScore:
		return m.AddedScore()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SubmitMutation) AddField(name string, value ent.Value) error {
	switch name {
	case submit.FieldYear:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddYear(v)
		return nil
	case submit.FieldScore:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddScore(v)
		return nil
	}
	return fmt.Errorf("unknown Submit numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SubmitMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(submit.FieldCompletedAt) {
		fields = append(fields, submit.FieldCompletedAt)
	}
	if m.FieldCleared(submit.FieldUpdatedAt) {
		fields = append(fields, submit.FieldUpdatedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SubmitMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SubmitMutation) ClearField(name string) error {
	switch name {
	case submit.FieldCompletedAt:
		m.ClearCompletedAt()
		return nil
	case submit.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Submit nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SubmitMutation) ResetField(name string) error {
	switch name {
	case submit.FieldYear:
		m.ResetYear()
		return nil
	case submit.FieldScore:
		m.ResetScore()
		return nil
	case submit.FieldLanguage:
		m.ResetLanguage()
		return nil
	case submit.FieldSubmitedAt:
		m.ResetSubmitedAt()
		return nil
	case submit.FieldCompletedAt:
		m.ResetCompletedAt()
		return nil
	case submit.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Submit field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SubmitMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.tagResults != nil {
		edges = append(edges, submit.EdgeTagResults)
	}
	if m.group != nil {
		edges = append(edges, submit.EdgeGroup)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SubmitMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case submit.EdgeTagResults:
		ids := make([]ent.Value, 0, len(m.tagResults))
		for id := range m.tagResults {
			ids = append(ids, id)
		}
		return ids
	case submit.EdgeGroup:
		ids := make([]ent.Value, 0, len(m.group))
		for id := range m.group {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SubmitMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedtagResults != nil {
		edges = append(edges, submit.EdgeTagResults)
	}
	if m.removedgroup != nil {
		edges = append(edges, submit.EdgeGroup)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SubmitMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case submit.EdgeTagResults:
		ids := make([]ent.Value, 0, len(m.removedtagResults))
		for id := range m.removedtagResults {
			ids = append(ids, id)
		}
		return ids
	case submit.EdgeGroup:
		ids := make([]ent.Value, 0, len(m.removedgroup))
		for id := range m.removedgroup {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SubmitMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedtagResults {
		edges = append(edges, submit.EdgeTagResults)
	}
	if m.clearedgroup {
		edges = append(edges, submit.EdgeGroup)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SubmitMutation) EdgeCleared(name string) bool {
	switch name {
	case submit.EdgeTagResults:
		return m.clearedtagResults
	case submit.EdgeGroup:
		return m.clearedgroup
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SubmitMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Submit unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SubmitMutation) ResetEdge(name string) error {
	switch name {
	case submit.EdgeTagResults:
		m.ResetTagResults()
		return nil
	case submit.EdgeGroup:
		m.ResetGroup()
		return nil
	}
	return fmt.Errorf("unknown Submit edge %s", name)
}

// TagResultMutation represents an operation that mutates the TagResult nodes in the graph.
type TagResultMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	score         *int
	addscore      *int
	created_at    *time.Time
	deleted_at    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*TagResult, error)
	predicates    []predicate.TagResult
}

var _ ent.Mutation = (*TagResultMutation)(nil)

// tagresultOption allows management of the mutation configuration using functional options.
type tagresultOption func(*TagResultMutation)

// newTagResultMutation creates new mutation for the TagResult entity.
func newTagResultMutation(c config, op Op, opts ...tagresultOption) *TagResultMutation {
	m := &TagResultMutation{
		config:        c,
		op:            op,
		typ:           TypeTagResult,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTagResultID sets the ID field of the mutation.
func withTagResultID(id int) tagresultOption {
	return func(m *TagResultMutation) {
		var (
			err   error
			once  sync.Once
			value *TagResult
		)
		m.oldValue = func(ctx context.Context) (*TagResult, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TagResult.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTagResult sets the old TagResult of the mutation.
func withTagResult(node *TagResult) tagresultOption {
	return func(m *TagResultMutation) {
		m.oldValue = func(context.Context) (*TagResult, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TagResultMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TagResultMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TagResultMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TagResultMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TagResult.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *TagResultMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TagResultMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the TagResult entity.
// If the TagResult object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TagResultMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TagResultMutation) ResetName() {
	m.name = nil
}

// SetScore sets the "score" field.
func (m *TagResultMutation) SetScore(i int) {
	m.score = &i
	m.addscore = nil
}

// Score returns the value of the "score" field in the mutation.
func (m *TagResultMutation) Score() (r int, exists bool) {
	v := m.score
	if v == nil {
		return
	}
	return *v, true
}

// OldScore returns the old "score" field's value of the TagResult entity.
// If the TagResult object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TagResultMutation) OldScore(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScore is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScore requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScore: %w", err)
	}
	return oldValue.Score, nil
}

// AddScore adds i to the "score" field.
func (m *TagResultMutation) AddScore(i int) {
	if m.addscore != nil {
		*m.addscore += i
	} else {
		m.addscore = &i
	}
}

// AddedScore returns the value that was added to the "score" field in this mutation.
func (m *TagResultMutation) AddedScore() (r int, exists bool) {
	v := m.addscore
	if v == nil {
		return
	}
	return *v, true
}

// ResetScore resets all changes to the "score" field.
func (m *TagResultMutation) ResetScore() {
	m.score = nil
	m.addscore = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *TagResultMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TagResultMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the TagResult entity.
// If the TagResult object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TagResultMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TagResultMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *TagResultMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *TagResultMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the TagResult entity.
// If the TagResult object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TagResultMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *TagResultMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[tagresult.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *TagResultMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[tagresult.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *TagResultMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, tagresult.FieldDeletedAt)
}

// Where appends a list predicates to the TagResultMutation builder.
func (m *TagResultMutation) Where(ps ...predicate.TagResult) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TagResultMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TagResultMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.TagResult, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TagResultMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TagResultMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (TagResult).
func (m *TagResultMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TagResultMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.name != nil {
		fields = append(fields, tagresult.FieldName)
	}
	if m.score != nil {
		fields = append(fields, tagresult.FieldScore)
	}
	if m.created_at != nil {
		fields = append(fields, tagresult.FieldCreatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, tagresult.FieldDeletedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TagResultMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case tagresult.FieldName:
		return m.Name()
	case tagresult.FieldScore:
		return m.Score()
	case tagresult.FieldCreatedAt:
		return m.CreatedAt()
	case tagresult.FieldDeletedAt:
		return m.DeletedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TagResultMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case tagresult.FieldName:
		return m.OldName(ctx)
	case tagresult.FieldScore:
		return m.OldScore(ctx)
	case tagresult.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case tagresult.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	}
	return nil, fmt.Errorf("unknown TagResult field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TagResultMutation) SetField(name string, value ent.Value) error {
	switch name {
	case tagresult.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case tagresult.FieldScore:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScore(v)
		return nil
	case tagresult.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case tagresult.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown TagResult field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TagResultMutation) AddedFields() []string {
	var fields []string
	if m.addscore != nil {
		fields = append(fields, tagresult.FieldScore)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TagResultMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case tagresult.FieldScore:
		return m.AddedScore()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TagResultMutation) AddField(name string, value ent.Value) error {
	switch name {
	case tagresult.FieldScore:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddScore(v)
		return nil
	}
	return fmt.Errorf("unknown TagResult numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TagResultMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(tagresult.FieldDeletedAt) {
		fields = append(fields, tagresult.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TagResultMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TagResultMutation) ClearField(name string) error {
	switch name {
	case tagresult.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown TagResult nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TagResultMutation) ResetField(name string) error {
	switch name {
	case tagresult.FieldName:
		m.ResetName()
		return nil
	case tagresult.FieldScore:
		m.ResetScore()
		return nil
	case tagresult.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case tagresult.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown TagResult field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TagResultMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TagResultMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TagResultMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TagResultMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TagResultMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TagResultMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TagResultMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown TagResult unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TagResultMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown TagResult edge %s", name)
}
