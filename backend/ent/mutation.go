// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ohkilab/SU-CSexpA-benchmark-system/backend/ent/contest"
	"github.com/ohkilab/SU-CSexpA-benchmark-system/backend/ent/group"
	"github.com/ohkilab/SU-CSexpA-benchmark-system/backend/ent/predicate"
	"github.com/ohkilab/SU-CSexpA-benchmark-system/backend/ent/submit"
	"github.com/ohkilab/SU-CSexpA-benchmark-system/backend/ent/taskresult"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeContest    = "Contest"
	TypeGroup      = "Group"
	TypeSubmit     = "Submit"
	TypeTaskResult = "TaskResult"
)

// ContestMutation represents an operation that mutates the Contest nodes in the graph.
type ContestMutation struct {
	config
	op              Op
	typ             string
	id              *int
	title           *string
	start_at        *time.Time
	end_at          *time.Time
	submit_limit    *int
	addsubmit_limit *int
	year            *int
	addyear         *int
	created_at      *time.Time
	updated_at      *time.Time
	clearedFields   map[string]struct{}
	submits         map[int]struct{}
	removedsubmits  map[int]struct{}
	clearedsubmits  bool
	done            bool
	oldValue        func(context.Context) (*Contest, error)
	predicates      []predicate.Contest
}

var _ ent.Mutation = (*ContestMutation)(nil)

// contestOption allows management of the mutation configuration using functional options.
type contestOption func(*ContestMutation)

// newContestMutation creates new mutation for the Contest entity.
func newContestMutation(c config, op Op, opts ...contestOption) *ContestMutation {
	m := &ContestMutation{
		config:        c,
		op:            op,
		typ:           TypeContest,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withContestID sets the ID field of the mutation.
func withContestID(id int) contestOption {
	return func(m *ContestMutation) {
		var (
			err   error
			once  sync.Once
			value *Contest
		)
		m.oldValue = func(ctx context.Context) (*Contest, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Contest.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withContest sets the old Contest of the mutation.
func withContest(node *Contest) contestOption {
	return func(m *ContestMutation) {
		m.oldValue = func(context.Context) (*Contest, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ContestMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ContestMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Contest entities.
func (m *ContestMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ContestMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ContestMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Contest.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTitle sets the "title" field.
func (m *ContestMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *ContestMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Contest entity.
// If the Contest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContestMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *ContestMutation) ResetTitle() {
	m.title = nil
}

// SetStartAt sets the "start_at" field.
func (m *ContestMutation) SetStartAt(t time.Time) {
	m.start_at = &t
}

// StartAt returns the value of the "start_at" field in the mutation.
func (m *ContestMutation) StartAt() (r time.Time, exists bool) {
	v := m.start_at
	if v == nil {
		return
	}
	return *v, true
}

// OldStartAt returns the old "start_at" field's value of the Contest entity.
// If the Contest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContestMutation) OldStartAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartAt: %w", err)
	}
	return oldValue.StartAt, nil
}

// ResetStartAt resets all changes to the "start_at" field.
func (m *ContestMutation) ResetStartAt() {
	m.start_at = nil
}

// SetEndAt sets the "end_at" field.
func (m *ContestMutation) SetEndAt(t time.Time) {
	m.end_at = &t
}

// EndAt returns the value of the "end_at" field in the mutation.
func (m *ContestMutation) EndAt() (r time.Time, exists bool) {
	v := m.end_at
	if v == nil {
		return
	}
	return *v, true
}

// OldEndAt returns the old "end_at" field's value of the Contest entity.
// If the Contest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContestMutation) OldEndAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndAt: %w", err)
	}
	return oldValue.EndAt, nil
}

// ResetEndAt resets all changes to the "end_at" field.
func (m *ContestMutation) ResetEndAt() {
	m.end_at = nil
}

// SetSubmitLimit sets the "submit_limit" field.
func (m *ContestMutation) SetSubmitLimit(i int) {
	m.submit_limit = &i
	m.addsubmit_limit = nil
}

// SubmitLimit returns the value of the "submit_limit" field in the mutation.
func (m *ContestMutation) SubmitLimit() (r int, exists bool) {
	v := m.submit_limit
	if v == nil {
		return
	}
	return *v, true
}

// OldSubmitLimit returns the old "submit_limit" field's value of the Contest entity.
// If the Contest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContestMutation) OldSubmitLimit(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubmitLimit is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubmitLimit requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubmitLimit: %w", err)
	}
	return oldValue.SubmitLimit, nil
}

// AddSubmitLimit adds i to the "submit_limit" field.
func (m *ContestMutation) AddSubmitLimit(i int) {
	if m.addsubmit_limit != nil {
		*m.addsubmit_limit += i
	} else {
		m.addsubmit_limit = &i
	}
}

// AddedSubmitLimit returns the value that was added to the "submit_limit" field in this mutation.
func (m *ContestMutation) AddedSubmitLimit() (r int, exists bool) {
	v := m.addsubmit_limit
	if v == nil {
		return
	}
	return *v, true
}

// ResetSubmitLimit resets all changes to the "submit_limit" field.
func (m *ContestMutation) ResetSubmitLimit() {
	m.submit_limit = nil
	m.addsubmit_limit = nil
}

// SetYear sets the "year" field.
func (m *ContestMutation) SetYear(i int) {
	m.year = &i
	m.addyear = nil
}

// Year returns the value of the "year" field in the mutation.
func (m *ContestMutation) Year() (r int, exists bool) {
	v := m.year
	if v == nil {
		return
	}
	return *v, true
}

// OldYear returns the old "year" field's value of the Contest entity.
// If the Contest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContestMutation) OldYear(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldYear is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldYear requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldYear: %w", err)
	}
	return oldValue.Year, nil
}

// AddYear adds i to the "year" field.
func (m *ContestMutation) AddYear(i int) {
	if m.addyear != nil {
		*m.addyear += i
	} else {
		m.addyear = &i
	}
}

// AddedYear returns the value that was added to the "year" field in this mutation.
func (m *ContestMutation) AddedYear() (r int, exists bool) {
	v := m.addyear
	if v == nil {
		return
	}
	return *v, true
}

// ResetYear resets all changes to the "year" field.
func (m *ContestMutation) ResetYear() {
	m.year = nil
	m.addyear = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ContestMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ContestMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Contest entity.
// If the Contest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContestMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ContestMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ContestMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ContestMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Contest entity.
// If the Contest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContestMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *ContestMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[contest.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *ContestMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[contest.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ContestMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, contest.FieldUpdatedAt)
}

// AddSubmitIDs adds the "submits" edge to the Submit entity by ids.
func (m *ContestMutation) AddSubmitIDs(ids ...int) {
	if m.submits == nil {
		m.submits = make(map[int]struct{})
	}
	for i := range ids {
		m.submits[ids[i]] = struct{}{}
	}
}

// ClearSubmits clears the "submits" edge to the Submit entity.
func (m *ContestMutation) ClearSubmits() {
	m.clearedsubmits = true
}

// SubmitsCleared reports if the "submits" edge to the Submit entity was cleared.
func (m *ContestMutation) SubmitsCleared() bool {
	return m.clearedsubmits
}

// RemoveSubmitIDs removes the "submits" edge to the Submit entity by IDs.
func (m *ContestMutation) RemoveSubmitIDs(ids ...int) {
	if m.removedsubmits == nil {
		m.removedsubmits = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.submits, ids[i])
		m.removedsubmits[ids[i]] = struct{}{}
	}
}

// RemovedSubmits returns the removed IDs of the "submits" edge to the Submit entity.
func (m *ContestMutation) RemovedSubmitsIDs() (ids []int) {
	for id := range m.removedsubmits {
		ids = append(ids, id)
	}
	return
}

// SubmitsIDs returns the "submits" edge IDs in the mutation.
func (m *ContestMutation) SubmitsIDs() (ids []int) {
	for id := range m.submits {
		ids = append(ids, id)
	}
	return
}

// ResetSubmits resets all changes to the "submits" edge.
func (m *ContestMutation) ResetSubmits() {
	m.submits = nil
	m.clearedsubmits = false
	m.removedsubmits = nil
}

// Where appends a list predicates to the ContestMutation builder.
func (m *ContestMutation) Where(ps ...predicate.Contest) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ContestMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ContestMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Contest, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ContestMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ContestMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Contest).
func (m *ContestMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ContestMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.title != nil {
		fields = append(fields, contest.FieldTitle)
	}
	if m.start_at != nil {
		fields = append(fields, contest.FieldStartAt)
	}
	if m.end_at != nil {
		fields = append(fields, contest.FieldEndAt)
	}
	if m.submit_limit != nil {
		fields = append(fields, contest.FieldSubmitLimit)
	}
	if m.year != nil {
		fields = append(fields, contest.FieldYear)
	}
	if m.created_at != nil {
		fields = append(fields, contest.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, contest.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ContestMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case contest.FieldTitle:
		return m.Title()
	case contest.FieldStartAt:
		return m.StartAt()
	case contest.FieldEndAt:
		return m.EndAt()
	case contest.FieldSubmitLimit:
		return m.SubmitLimit()
	case contest.FieldYear:
		return m.Year()
	case contest.FieldCreatedAt:
		return m.CreatedAt()
	case contest.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ContestMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case contest.FieldTitle:
		return m.OldTitle(ctx)
	case contest.FieldStartAt:
		return m.OldStartAt(ctx)
	case contest.FieldEndAt:
		return m.OldEndAt(ctx)
	case contest.FieldSubmitLimit:
		return m.OldSubmitLimit(ctx)
	case contest.FieldYear:
		return m.OldYear(ctx)
	case contest.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case contest.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Contest field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ContestMutation) SetField(name string, value ent.Value) error {
	switch name {
	case contest.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case contest.FieldStartAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartAt(v)
		return nil
	case contest.FieldEndAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndAt(v)
		return nil
	case contest.FieldSubmitLimit:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubmitLimit(v)
		return nil
	case contest.FieldYear:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetYear(v)
		return nil
	case contest.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case contest.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Contest field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ContestMutation) AddedFields() []string {
	var fields []string
	if m.addsubmit_limit != nil {
		fields = append(fields, contest.FieldSubmitLimit)
	}
	if m.addyear != nil {
		fields = append(fields, contest.FieldYear)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ContestMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case contest.FieldSubmitLimit:
		return m.AddedSubmitLimit()
	case contest.FieldYear:
		return m.AddedYear()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ContestMutation) AddField(name string, value ent.Value) error {
	switch name {
	case contest.FieldSubmitLimit:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSubmitLimit(v)
		return nil
	case contest.FieldYear:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddYear(v)
		return nil
	}
	return fmt.Errorf("unknown Contest numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ContestMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(contest.FieldUpdatedAt) {
		fields = append(fields, contest.FieldUpdatedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ContestMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ContestMutation) ClearField(name string) error {
	switch name {
	case contest.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Contest nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ContestMutation) ResetField(name string) error {
	switch name {
	case contest.FieldTitle:
		m.ResetTitle()
		return nil
	case contest.FieldStartAt:
		m.ResetStartAt()
		return nil
	case contest.FieldEndAt:
		m.ResetEndAt()
		return nil
	case contest.FieldSubmitLimit:
		m.ResetSubmitLimit()
		return nil
	case contest.FieldYear:
		m.ResetYear()
		return nil
	case contest.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case contest.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Contest field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ContestMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.submits != nil {
		edges = append(edges, contest.EdgeSubmits)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ContestMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case contest.EdgeSubmits:
		ids := make([]ent.Value, 0, len(m.submits))
		for id := range m.submits {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ContestMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedsubmits != nil {
		edges = append(edges, contest.EdgeSubmits)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ContestMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case contest.EdgeSubmits:
		ids := make([]ent.Value, 0, len(m.removedsubmits))
		for id := range m.removedsubmits {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ContestMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedsubmits {
		edges = append(edges, contest.EdgeSubmits)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ContestMutation) EdgeCleared(name string) bool {
	switch name {
	case contest.EdgeSubmits:
		return m.clearedsubmits
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ContestMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Contest unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ContestMutation) ResetEdge(name string) error {
	switch name {
	case contest.EdgeSubmits:
		m.ResetSubmits()
		return nil
	}
	return fmt.Errorf("unknown Contest edge %s", name)
}

// GroupMutation represents an operation that mutates the Group nodes in the graph.
type GroupMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	name               *string
	year               *int
	addyear            *int
	score              *int
	addscore           *int
	role               *group.Role
	encrypted_password *string
	clearedFields      map[string]struct{}
	submits            map[int]struct{}
	removedsubmits     map[int]struct{}
	clearedsubmits     bool
	done               bool
	oldValue           func(context.Context) (*Group, error)
	predicates         []predicate.Group
}

var _ ent.Mutation = (*GroupMutation)(nil)

// groupOption allows management of the mutation configuration using functional options.
type groupOption func(*GroupMutation)

// newGroupMutation creates new mutation for the Group entity.
func newGroupMutation(c config, op Op, opts ...groupOption) *GroupMutation {
	m := &GroupMutation{
		config:        c,
		op:            op,
		typ:           TypeGroup,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGroupID sets the ID field of the mutation.
func withGroupID(id int) groupOption {
	return func(m *GroupMutation) {
		var (
			err   error
			once  sync.Once
			value *Group
		)
		m.oldValue = func(ctx context.Context) (*Group, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Group.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGroup sets the old Group of the mutation.
func withGroup(node *Group) groupOption {
	return func(m *GroupMutation) {
		m.oldValue = func(context.Context) (*Group, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GroupMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GroupMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Group entities.
func (m *GroupMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GroupMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GroupMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Group.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *GroupMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *GroupMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *GroupMutation) ResetName() {
	m.name = nil
}

// SetYear sets the "year" field.
func (m *GroupMutation) SetYear(i int) {
	m.year = &i
	m.addyear = nil
}

// Year returns the value of the "year" field in the mutation.
func (m *GroupMutation) Year() (r int, exists bool) {
	v := m.year
	if v == nil {
		return
	}
	return *v, true
}

// OldYear returns the old "year" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldYear(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldYear is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldYear requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldYear: %w", err)
	}
	return oldValue.Year, nil
}

// AddYear adds i to the "year" field.
func (m *GroupMutation) AddYear(i int) {
	if m.addyear != nil {
		*m.addyear += i
	} else {
		m.addyear = &i
	}
}

// AddedYear returns the value that was added to the "year" field in this mutation.
func (m *GroupMutation) AddedYear() (r int, exists bool) {
	v := m.addyear
	if v == nil {
		return
	}
	return *v, true
}

// ResetYear resets all changes to the "year" field.
func (m *GroupMutation) ResetYear() {
	m.year = nil
	m.addyear = nil
}

// SetScore sets the "score" field.
func (m *GroupMutation) SetScore(i int) {
	m.score = &i
	m.addscore = nil
}

// Score returns the value of the "score" field in the mutation.
func (m *GroupMutation) Score() (r int, exists bool) {
	v := m.score
	if v == nil {
		return
	}
	return *v, true
}

// OldScore returns the old "score" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldScore(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScore is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScore requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScore: %w", err)
	}
	return oldValue.Score, nil
}

// AddScore adds i to the "score" field.
func (m *GroupMutation) AddScore(i int) {
	if m.addscore != nil {
		*m.addscore += i
	} else {
		m.addscore = &i
	}
}

// AddedScore returns the value that was added to the "score" field in this mutation.
func (m *GroupMutation) AddedScore() (r int, exists bool) {
	v := m.addscore
	if v == nil {
		return
	}
	return *v, true
}

// ResetScore resets all changes to the "score" field.
func (m *GroupMutation) ResetScore() {
	m.score = nil
	m.addscore = nil
}

// SetRole sets the "role" field.
func (m *GroupMutation) SetRole(gr group.Role) {
	m.role = &gr
}

// Role returns the value of the "role" field in the mutation.
func (m *GroupMutation) Role() (r group.Role, exists bool) {
	v := m.role
	if v == nil {
		return
	}
	return *v, true
}

// OldRole returns the old "role" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldRole(ctx context.Context) (v group.Role, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRole is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRole requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRole: %w", err)
	}
	return oldValue.Role, nil
}

// ResetRole resets all changes to the "role" field.
func (m *GroupMutation) ResetRole() {
	m.role = nil
}

// SetEncryptedPassword sets the "encrypted_password" field.
func (m *GroupMutation) SetEncryptedPassword(s string) {
	m.encrypted_password = &s
}

// EncryptedPassword returns the value of the "encrypted_password" field in the mutation.
func (m *GroupMutation) EncryptedPassword() (r string, exists bool) {
	v := m.encrypted_password
	if v == nil {
		return
	}
	return *v, true
}

// OldEncryptedPassword returns the old "encrypted_password" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldEncryptedPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEncryptedPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEncryptedPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEncryptedPassword: %w", err)
	}
	return oldValue.EncryptedPassword, nil
}

// ResetEncryptedPassword resets all changes to the "encrypted_password" field.
func (m *GroupMutation) ResetEncryptedPassword() {
	m.encrypted_password = nil
}

// AddSubmitIDs adds the "submits" edge to the Submit entity by ids.
func (m *GroupMutation) AddSubmitIDs(ids ...int) {
	if m.submits == nil {
		m.submits = make(map[int]struct{})
	}
	for i := range ids {
		m.submits[ids[i]] = struct{}{}
	}
}

// ClearSubmits clears the "submits" edge to the Submit entity.
func (m *GroupMutation) ClearSubmits() {
	m.clearedsubmits = true
}

// SubmitsCleared reports if the "submits" edge to the Submit entity was cleared.
func (m *GroupMutation) SubmitsCleared() bool {
	return m.clearedsubmits
}

// RemoveSubmitIDs removes the "submits" edge to the Submit entity by IDs.
func (m *GroupMutation) RemoveSubmitIDs(ids ...int) {
	if m.removedsubmits == nil {
		m.removedsubmits = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.submits, ids[i])
		m.removedsubmits[ids[i]] = struct{}{}
	}
}

// RemovedSubmits returns the removed IDs of the "submits" edge to the Submit entity.
func (m *GroupMutation) RemovedSubmitsIDs() (ids []int) {
	for id := range m.removedsubmits {
		ids = append(ids, id)
	}
	return
}

// SubmitsIDs returns the "submits" edge IDs in the mutation.
func (m *GroupMutation) SubmitsIDs() (ids []int) {
	for id := range m.submits {
		ids = append(ids, id)
	}
	return
}

// ResetSubmits resets all changes to the "submits" edge.
func (m *GroupMutation) ResetSubmits() {
	m.submits = nil
	m.clearedsubmits = false
	m.removedsubmits = nil
}

// Where appends a list predicates to the GroupMutation builder.
func (m *GroupMutation) Where(ps ...predicate.Group) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GroupMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GroupMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Group, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GroupMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GroupMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Group).
func (m *GroupMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GroupMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.name != nil {
		fields = append(fields, group.FieldName)
	}
	if m.year != nil {
		fields = append(fields, group.FieldYear)
	}
	if m.score != nil {
		fields = append(fields, group.FieldScore)
	}
	if m.role != nil {
		fields = append(fields, group.FieldRole)
	}
	if m.encrypted_password != nil {
		fields = append(fields, group.FieldEncryptedPassword)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GroupMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case group.FieldName:
		return m.Name()
	case group.FieldYear:
		return m.Year()
	case group.FieldScore:
		return m.Score()
	case group.FieldRole:
		return m.Role()
	case group.FieldEncryptedPassword:
		return m.EncryptedPassword()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GroupMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case group.FieldName:
		return m.OldName(ctx)
	case group.FieldYear:
		return m.OldYear(ctx)
	case group.FieldScore:
		return m.OldScore(ctx)
	case group.FieldRole:
		return m.OldRole(ctx)
	case group.FieldEncryptedPassword:
		return m.OldEncryptedPassword(ctx)
	}
	return nil, fmt.Errorf("unknown Group field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupMutation) SetField(name string, value ent.Value) error {
	switch name {
	case group.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case group.FieldYear:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetYear(v)
		return nil
	case group.FieldScore:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScore(v)
		return nil
	case group.FieldRole:
		v, ok := value.(group.Role)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRole(v)
		return nil
	case group.FieldEncryptedPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEncryptedPassword(v)
		return nil
	}
	return fmt.Errorf("unknown Group field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GroupMutation) AddedFields() []string {
	var fields []string
	if m.addyear != nil {
		fields = append(fields, group.FieldYear)
	}
	if m.addscore != nil {
		fields = append(fields, group.FieldScore)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GroupMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case group.FieldYear:
		return m.AddedYear()
	case group.FieldScore:
		return m.AddedScore()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupMutation) AddField(name string, value ent.Value) error {
	switch name {
	case group.FieldYear:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddYear(v)
		return nil
	case group.FieldScore:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddScore(v)
		return nil
	}
	return fmt.Errorf("unknown Group numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GroupMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GroupMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GroupMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Group nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GroupMutation) ResetField(name string) error {
	switch name {
	case group.FieldName:
		m.ResetName()
		return nil
	case group.FieldYear:
		m.ResetYear()
		return nil
	case group.FieldScore:
		m.ResetScore()
		return nil
	case group.FieldRole:
		m.ResetRole()
		return nil
	case group.FieldEncryptedPassword:
		m.ResetEncryptedPassword()
		return nil
	}
	return fmt.Errorf("unknown Group field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GroupMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.submits != nil {
		edges = append(edges, group.EdgeSubmits)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GroupMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case group.EdgeSubmits:
		ids := make([]ent.Value, 0, len(m.submits))
		for id := range m.submits {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GroupMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedsubmits != nil {
		edges = append(edges, group.EdgeSubmits)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GroupMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case group.EdgeSubmits:
		ids := make([]ent.Value, 0, len(m.removedsubmits))
		for id := range m.removedsubmits {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GroupMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedsubmits {
		edges = append(edges, group.EdgeSubmits)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GroupMutation) EdgeCleared(name string) bool {
	switch name {
	case group.EdgeSubmits:
		return m.clearedsubmits
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GroupMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Group unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GroupMutation) ResetEdge(name string) error {
	switch name {
	case group.EdgeSubmits:
		m.ResetSubmits()
		return nil
	}
	return fmt.Errorf("unknown Group edge %s", name)
}

// SubmitMutation represents an operation that mutates the Submit nodes in the graph.
type SubmitMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	ip_addr            *string
	year               *int
	addyear            *int
	score              *int
	addscore           *int
	language           *submit.Language
	submited_at        *time.Time
	completed_at       *time.Time
	updated_at         *time.Time
	clearedFields      map[string]struct{}
	taskResults        map[int]struct{}
	removedtaskResults map[int]struct{}
	clearedtaskResults bool
	groups             *int
	clearedgroups      bool
	contests           *int
	clearedcontests    bool
	done               bool
	oldValue           func(context.Context) (*Submit, error)
	predicates         []predicate.Submit
}

var _ ent.Mutation = (*SubmitMutation)(nil)

// submitOption allows management of the mutation configuration using functional options.
type submitOption func(*SubmitMutation)

// newSubmitMutation creates new mutation for the Submit entity.
func newSubmitMutation(c config, op Op, opts ...submitOption) *SubmitMutation {
	m := &SubmitMutation{
		config:        c,
		op:            op,
		typ:           TypeSubmit,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSubmitID sets the ID field of the mutation.
func withSubmitID(id int) submitOption {
	return func(m *SubmitMutation) {
		var (
			err   error
			once  sync.Once
			value *Submit
		)
		m.oldValue = func(ctx context.Context) (*Submit, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Submit.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSubmit sets the old Submit of the mutation.
func withSubmit(node *Submit) submitOption {
	return func(m *SubmitMutation) {
		m.oldValue = func(context.Context) (*Submit, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SubmitMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SubmitMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Submit entities.
func (m *SubmitMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SubmitMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SubmitMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Submit.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIPAddr sets the "ip_addr" field.
func (m *SubmitMutation) SetIPAddr(s string) {
	m.ip_addr = &s
}

// IPAddr returns the value of the "ip_addr" field in the mutation.
func (m *SubmitMutation) IPAddr() (r string, exists bool) {
	v := m.ip_addr
	if v == nil {
		return
	}
	return *v, true
}

// OldIPAddr returns the old "ip_addr" field's value of the Submit entity.
// If the Submit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubmitMutation) OldIPAddr(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIPAddr is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIPAddr requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIPAddr: %w", err)
	}
	return oldValue.IPAddr, nil
}

// ResetIPAddr resets all changes to the "ip_addr" field.
func (m *SubmitMutation) ResetIPAddr() {
	m.ip_addr = nil
}

// SetYear sets the "year" field.
func (m *SubmitMutation) SetYear(i int) {
	m.year = &i
	m.addyear = nil
}

// Year returns the value of the "year" field in the mutation.
func (m *SubmitMutation) Year() (r int, exists bool) {
	v := m.year
	if v == nil {
		return
	}
	return *v, true
}

// OldYear returns the old "year" field's value of the Submit entity.
// If the Submit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubmitMutation) OldYear(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldYear is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldYear requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldYear: %w", err)
	}
	return oldValue.Year, nil
}

// AddYear adds i to the "year" field.
func (m *SubmitMutation) AddYear(i int) {
	if m.addyear != nil {
		*m.addyear += i
	} else {
		m.addyear = &i
	}
}

// AddedYear returns the value that was added to the "year" field in this mutation.
func (m *SubmitMutation) AddedYear() (r int, exists bool) {
	v := m.addyear
	if v == nil {
		return
	}
	return *v, true
}

// ResetYear resets all changes to the "year" field.
func (m *SubmitMutation) ResetYear() {
	m.year = nil
	m.addyear = nil
}

// SetScore sets the "score" field.
func (m *SubmitMutation) SetScore(i int) {
	m.score = &i
	m.addscore = nil
}

// Score returns the value of the "score" field in the mutation.
func (m *SubmitMutation) Score() (r int, exists bool) {
	v := m.score
	if v == nil {
		return
	}
	return *v, true
}

// OldScore returns the old "score" field's value of the Submit entity.
// If the Submit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubmitMutation) OldScore(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScore is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScore requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScore: %w", err)
	}
	return oldValue.Score, nil
}

// AddScore adds i to the "score" field.
func (m *SubmitMutation) AddScore(i int) {
	if m.addscore != nil {
		*m.addscore += i
	} else {
		m.addscore = &i
	}
}

// AddedScore returns the value that was added to the "score" field in this mutation.
func (m *SubmitMutation) AddedScore() (r int, exists bool) {
	v := m.addscore
	if v == nil {
		return
	}
	return *v, true
}

// ClearScore clears the value of the "score" field.
func (m *SubmitMutation) ClearScore() {
	m.score = nil
	m.addscore = nil
	m.clearedFields[submit.FieldScore] = struct{}{}
}

// ScoreCleared returns if the "score" field was cleared in this mutation.
func (m *SubmitMutation) ScoreCleared() bool {
	_, ok := m.clearedFields[submit.FieldScore]
	return ok
}

// ResetScore resets all changes to the "score" field.
func (m *SubmitMutation) ResetScore() {
	m.score = nil
	m.addscore = nil
	delete(m.clearedFields, submit.FieldScore)
}

// SetLanguage sets the "language" field.
func (m *SubmitMutation) SetLanguage(s submit.Language) {
	m.language = &s
}

// Language returns the value of the "language" field in the mutation.
func (m *SubmitMutation) Language() (r submit.Language, exists bool) {
	v := m.language
	if v == nil {
		return
	}
	return *v, true
}

// OldLanguage returns the old "language" field's value of the Submit entity.
// If the Submit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubmitMutation) OldLanguage(ctx context.Context) (v submit.Language, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLanguage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLanguage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLanguage: %w", err)
	}
	return oldValue.Language, nil
}

// ClearLanguage clears the value of the "language" field.
func (m *SubmitMutation) ClearLanguage() {
	m.language = nil
	m.clearedFields[submit.FieldLanguage] = struct{}{}
}

// LanguageCleared returns if the "language" field was cleared in this mutation.
func (m *SubmitMutation) LanguageCleared() bool {
	_, ok := m.clearedFields[submit.FieldLanguage]
	return ok
}

// ResetLanguage resets all changes to the "language" field.
func (m *SubmitMutation) ResetLanguage() {
	m.language = nil
	delete(m.clearedFields, submit.FieldLanguage)
}

// SetSubmitedAt sets the "submited_at" field.
func (m *SubmitMutation) SetSubmitedAt(t time.Time) {
	m.submited_at = &t
}

// SubmitedAt returns the value of the "submited_at" field in the mutation.
func (m *SubmitMutation) SubmitedAt() (r time.Time, exists bool) {
	v := m.submited_at
	if v == nil {
		return
	}
	return *v, true
}

// OldSubmitedAt returns the old "submited_at" field's value of the Submit entity.
// If the Submit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubmitMutation) OldSubmitedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubmitedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubmitedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubmitedAt: %w", err)
	}
	return oldValue.SubmitedAt, nil
}

// ResetSubmitedAt resets all changes to the "submited_at" field.
func (m *SubmitMutation) ResetSubmitedAt() {
	m.submited_at = nil
}

// SetCompletedAt sets the "completed_at" field.
func (m *SubmitMutation) SetCompletedAt(t time.Time) {
	m.completed_at = &t
}

// CompletedAt returns the value of the "completed_at" field in the mutation.
func (m *SubmitMutation) CompletedAt() (r time.Time, exists bool) {
	v := m.completed_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCompletedAt returns the old "completed_at" field's value of the Submit entity.
// If the Submit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubmitMutation) OldCompletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCompletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCompletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCompletedAt: %w", err)
	}
	return oldValue.CompletedAt, nil
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (m *SubmitMutation) ClearCompletedAt() {
	m.completed_at = nil
	m.clearedFields[submit.FieldCompletedAt] = struct{}{}
}

// CompletedAtCleared returns if the "completed_at" field was cleared in this mutation.
func (m *SubmitMutation) CompletedAtCleared() bool {
	_, ok := m.clearedFields[submit.FieldCompletedAt]
	return ok
}

// ResetCompletedAt resets all changes to the "completed_at" field.
func (m *SubmitMutation) ResetCompletedAt() {
	m.completed_at = nil
	delete(m.clearedFields, submit.FieldCompletedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SubmitMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SubmitMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Submit entity.
// If the Submit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubmitMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *SubmitMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[submit.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *SubmitMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[submit.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SubmitMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, submit.FieldUpdatedAt)
}

// AddTaskResultIDs adds the "taskResults" edge to the TaskResult entity by ids.
func (m *SubmitMutation) AddTaskResultIDs(ids ...int) {
	if m.taskResults == nil {
		m.taskResults = make(map[int]struct{})
	}
	for i := range ids {
		m.taskResults[ids[i]] = struct{}{}
	}
}

// ClearTaskResults clears the "taskResults" edge to the TaskResult entity.
func (m *SubmitMutation) ClearTaskResults() {
	m.clearedtaskResults = true
}

// TaskResultsCleared reports if the "taskResults" edge to the TaskResult entity was cleared.
func (m *SubmitMutation) TaskResultsCleared() bool {
	return m.clearedtaskResults
}

// RemoveTaskResultIDs removes the "taskResults" edge to the TaskResult entity by IDs.
func (m *SubmitMutation) RemoveTaskResultIDs(ids ...int) {
	if m.removedtaskResults == nil {
		m.removedtaskResults = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.taskResults, ids[i])
		m.removedtaskResults[ids[i]] = struct{}{}
	}
}

// RemovedTaskResults returns the removed IDs of the "taskResults" edge to the TaskResult entity.
func (m *SubmitMutation) RemovedTaskResultsIDs() (ids []int) {
	for id := range m.removedtaskResults {
		ids = append(ids, id)
	}
	return
}

// TaskResultsIDs returns the "taskResults" edge IDs in the mutation.
func (m *SubmitMutation) TaskResultsIDs() (ids []int) {
	for id := range m.taskResults {
		ids = append(ids, id)
	}
	return
}

// ResetTaskResults resets all changes to the "taskResults" edge.
func (m *SubmitMutation) ResetTaskResults() {
	m.taskResults = nil
	m.clearedtaskResults = false
	m.removedtaskResults = nil
}

// SetGroupsID sets the "groups" edge to the Group entity by id.
func (m *SubmitMutation) SetGroupsID(id int) {
	m.groups = &id
}

// ClearGroups clears the "groups" edge to the Group entity.
func (m *SubmitMutation) ClearGroups() {
	m.clearedgroups = true
}

// GroupsCleared reports if the "groups" edge to the Group entity was cleared.
func (m *SubmitMutation) GroupsCleared() bool {
	return m.clearedgroups
}

// GroupsID returns the "groups" edge ID in the mutation.
func (m *SubmitMutation) GroupsID() (id int, exists bool) {
	if m.groups != nil {
		return *m.groups, true
	}
	return
}

// GroupsIDs returns the "groups" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// GroupsID instead. It exists only for internal usage by the builders.
func (m *SubmitMutation) GroupsIDs() (ids []int) {
	if id := m.groups; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGroups resets all changes to the "groups" edge.
func (m *SubmitMutation) ResetGroups() {
	m.groups = nil
	m.clearedgroups = false
}

// SetContestsID sets the "contests" edge to the Contest entity by id.
func (m *SubmitMutation) SetContestsID(id int) {
	m.contests = &id
}

// ClearContests clears the "contests" edge to the Contest entity.
func (m *SubmitMutation) ClearContests() {
	m.clearedcontests = true
}

// ContestsCleared reports if the "contests" edge to the Contest entity was cleared.
func (m *SubmitMutation) ContestsCleared() bool {
	return m.clearedcontests
}

// ContestsID returns the "contests" edge ID in the mutation.
func (m *SubmitMutation) ContestsID() (id int, exists bool) {
	if m.contests != nil {
		return *m.contests, true
	}
	return
}

// ContestsIDs returns the "contests" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ContestsID instead. It exists only for internal usage by the builders.
func (m *SubmitMutation) ContestsIDs() (ids []int) {
	if id := m.contests; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetContests resets all changes to the "contests" edge.
func (m *SubmitMutation) ResetContests() {
	m.contests = nil
	m.clearedcontests = false
}

// Where appends a list predicates to the SubmitMutation builder.
func (m *SubmitMutation) Where(ps ...predicate.Submit) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SubmitMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SubmitMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Submit, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SubmitMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SubmitMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Submit).
func (m *SubmitMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SubmitMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.ip_addr != nil {
		fields = append(fields, submit.FieldIPAddr)
	}
	if m.year != nil {
		fields = append(fields, submit.FieldYear)
	}
	if m.score != nil {
		fields = append(fields, submit.FieldScore)
	}
	if m.language != nil {
		fields = append(fields, submit.FieldLanguage)
	}
	if m.submited_at != nil {
		fields = append(fields, submit.FieldSubmitedAt)
	}
	if m.completed_at != nil {
		fields = append(fields, submit.FieldCompletedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, submit.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SubmitMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case submit.FieldIPAddr:
		return m.IPAddr()
	case submit.FieldYear:
		return m.Year()
	case submit.FieldScore:
		return m.Score()
	case submit.FieldLanguage:
		return m.Language()
	case submit.FieldSubmitedAt:
		return m.SubmitedAt()
	case submit.FieldCompletedAt:
		return m.CompletedAt()
	case submit.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SubmitMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case submit.FieldIPAddr:
		return m.OldIPAddr(ctx)
	case submit.FieldYear:
		return m.OldYear(ctx)
	case submit.FieldScore:
		return m.OldScore(ctx)
	case submit.FieldLanguage:
		return m.OldLanguage(ctx)
	case submit.FieldSubmitedAt:
		return m.OldSubmitedAt(ctx)
	case submit.FieldCompletedAt:
		return m.OldCompletedAt(ctx)
	case submit.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Submit field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SubmitMutation) SetField(name string, value ent.Value) error {
	switch name {
	case submit.FieldIPAddr:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIPAddr(v)
		return nil
	case submit.FieldYear:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetYear(v)
		return nil
	case submit.FieldScore:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScore(v)
		return nil
	case submit.FieldLanguage:
		v, ok := value.(submit.Language)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLanguage(v)
		return nil
	case submit.FieldSubmitedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubmitedAt(v)
		return nil
	case submit.FieldCompletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCompletedAt(v)
		return nil
	case submit.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Submit field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SubmitMutation) AddedFields() []string {
	var fields []string
	if m.addyear != nil {
		fields = append(fields, submit.FieldYear)
	}
	if m.addscore != nil {
		fields = append(fields, submit.FieldScore)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SubmitMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case submit.FieldYear:
		return m.AddedYear()
	case submit.FieldScore:
		return m.AddedScore()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SubmitMutation) AddField(name string, value ent.Value) error {
	switch name {
	case submit.FieldYear:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddYear(v)
		return nil
	case submit.FieldScore:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddScore(v)
		return nil
	}
	return fmt.Errorf("unknown Submit numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SubmitMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(submit.FieldScore) {
		fields = append(fields, submit.FieldScore)
	}
	if m.FieldCleared(submit.FieldLanguage) {
		fields = append(fields, submit.FieldLanguage)
	}
	if m.FieldCleared(submit.FieldCompletedAt) {
		fields = append(fields, submit.FieldCompletedAt)
	}
	if m.FieldCleared(submit.FieldUpdatedAt) {
		fields = append(fields, submit.FieldUpdatedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SubmitMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SubmitMutation) ClearField(name string) error {
	switch name {
	case submit.FieldScore:
		m.ClearScore()
		return nil
	case submit.FieldLanguage:
		m.ClearLanguage()
		return nil
	case submit.FieldCompletedAt:
		m.ClearCompletedAt()
		return nil
	case submit.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Submit nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SubmitMutation) ResetField(name string) error {
	switch name {
	case submit.FieldIPAddr:
		m.ResetIPAddr()
		return nil
	case submit.FieldYear:
		m.ResetYear()
		return nil
	case submit.FieldScore:
		m.ResetScore()
		return nil
	case submit.FieldLanguage:
		m.ResetLanguage()
		return nil
	case submit.FieldSubmitedAt:
		m.ResetSubmitedAt()
		return nil
	case submit.FieldCompletedAt:
		m.ResetCompletedAt()
		return nil
	case submit.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Submit field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SubmitMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.taskResults != nil {
		edges = append(edges, submit.EdgeTaskResults)
	}
	if m.groups != nil {
		edges = append(edges, submit.EdgeGroups)
	}
	if m.contests != nil {
		edges = append(edges, submit.EdgeContests)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SubmitMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case submit.EdgeTaskResults:
		ids := make([]ent.Value, 0, len(m.taskResults))
		for id := range m.taskResults {
			ids = append(ids, id)
		}
		return ids
	case submit.EdgeGroups:
		if id := m.groups; id != nil {
			return []ent.Value{*id}
		}
	case submit.EdgeContests:
		if id := m.contests; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SubmitMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedtaskResults != nil {
		edges = append(edges, submit.EdgeTaskResults)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SubmitMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case submit.EdgeTaskResults:
		ids := make([]ent.Value, 0, len(m.removedtaskResults))
		for id := range m.removedtaskResults {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SubmitMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedtaskResults {
		edges = append(edges, submit.EdgeTaskResults)
	}
	if m.clearedgroups {
		edges = append(edges, submit.EdgeGroups)
	}
	if m.clearedcontests {
		edges = append(edges, submit.EdgeContests)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SubmitMutation) EdgeCleared(name string) bool {
	switch name {
	case submit.EdgeTaskResults:
		return m.clearedtaskResults
	case submit.EdgeGroups:
		return m.clearedgroups
	case submit.EdgeContests:
		return m.clearedcontests
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SubmitMutation) ClearEdge(name string) error {
	switch name {
	case submit.EdgeGroups:
		m.ClearGroups()
		return nil
	case submit.EdgeContests:
		m.ClearContests()
		return nil
	}
	return fmt.Errorf("unknown Submit unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SubmitMutation) ResetEdge(name string) error {
	switch name {
	case submit.EdgeTaskResults:
		m.ResetTaskResults()
		return nil
	case submit.EdgeGroups:
		m.ResetGroups()
		return nil
	case submit.EdgeContests:
		m.ResetContests()
		return nil
	}
	return fmt.Errorf("unknown Submit edge %s", name)
}

// TaskResultMutation represents an operation that mutates the TaskResult nodes in the graph.
type TaskResultMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	request_per_sec      *int
	addrequest_per_sec   *int
	error_message        *string
	url                  *string
	method               *string
	request_content_type *string
	request_body         *string
	thread_num           *int
	addthread_num        *int
	attempt_count        *int
	addattempt_count     *int
	created_at           *time.Time
	deleted_at           *time.Time
	clearedFields        map[string]struct{}
	done                 bool
	oldValue             func(context.Context) (*TaskResult, error)
	predicates           []predicate.TaskResult
}

var _ ent.Mutation = (*TaskResultMutation)(nil)

// taskresultOption allows management of the mutation configuration using functional options.
type taskresultOption func(*TaskResultMutation)

// newTaskResultMutation creates new mutation for the TaskResult entity.
func newTaskResultMutation(c config, op Op, opts ...taskresultOption) *TaskResultMutation {
	m := &TaskResultMutation{
		config:        c,
		op:            op,
		typ:           TypeTaskResult,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTaskResultID sets the ID field of the mutation.
func withTaskResultID(id int) taskresultOption {
	return func(m *TaskResultMutation) {
		var (
			err   error
			once  sync.Once
			value *TaskResult
		)
		m.oldValue = func(ctx context.Context) (*TaskResult, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TaskResult.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTaskResult sets the old TaskResult of the mutation.
func withTaskResult(node *TaskResult) taskresultOption {
	return func(m *TaskResultMutation) {
		m.oldValue = func(context.Context) (*TaskResult, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TaskResultMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TaskResultMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TaskResult entities.
func (m *TaskResultMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TaskResultMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TaskResultMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TaskResult.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetRequestPerSec sets the "request_per_sec" field.
func (m *TaskResultMutation) SetRequestPerSec(i int) {
	m.request_per_sec = &i
	m.addrequest_per_sec = nil
}

// RequestPerSec returns the value of the "request_per_sec" field in the mutation.
func (m *TaskResultMutation) RequestPerSec() (r int, exists bool) {
	v := m.request_per_sec
	if v == nil {
		return
	}
	return *v, true
}

// OldRequestPerSec returns the old "request_per_sec" field's value of the TaskResult entity.
// If the TaskResult object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskResultMutation) OldRequestPerSec(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRequestPerSec is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRequestPerSec requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRequestPerSec: %w", err)
	}
	return oldValue.RequestPerSec, nil
}

// AddRequestPerSec adds i to the "request_per_sec" field.
func (m *TaskResultMutation) AddRequestPerSec(i int) {
	if m.addrequest_per_sec != nil {
		*m.addrequest_per_sec += i
	} else {
		m.addrequest_per_sec = &i
	}
}

// AddedRequestPerSec returns the value that was added to the "request_per_sec" field in this mutation.
func (m *TaskResultMutation) AddedRequestPerSec() (r int, exists bool) {
	v := m.addrequest_per_sec
	if v == nil {
		return
	}
	return *v, true
}

// ResetRequestPerSec resets all changes to the "request_per_sec" field.
func (m *TaskResultMutation) ResetRequestPerSec() {
	m.request_per_sec = nil
	m.addrequest_per_sec = nil
}

// SetErrorMessage sets the "error_message" field.
func (m *TaskResultMutation) SetErrorMessage(s string) {
	m.error_message = &s
}

// ErrorMessage returns the value of the "error_message" field in the mutation.
func (m *TaskResultMutation) ErrorMessage() (r string, exists bool) {
	v := m.error_message
	if v == nil {
		return
	}
	return *v, true
}

// OldErrorMessage returns the old "error_message" field's value of the TaskResult entity.
// If the TaskResult object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskResultMutation) OldErrorMessage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldErrorMessage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldErrorMessage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldErrorMessage: %w", err)
	}
	return oldValue.ErrorMessage, nil
}

// ClearErrorMessage clears the value of the "error_message" field.
func (m *TaskResultMutation) ClearErrorMessage() {
	m.error_message = nil
	m.clearedFields[taskresult.FieldErrorMessage] = struct{}{}
}

// ErrorMessageCleared returns if the "error_message" field was cleared in this mutation.
func (m *TaskResultMutation) ErrorMessageCleared() bool {
	_, ok := m.clearedFields[taskresult.FieldErrorMessage]
	return ok
}

// ResetErrorMessage resets all changes to the "error_message" field.
func (m *TaskResultMutation) ResetErrorMessage() {
	m.error_message = nil
	delete(m.clearedFields, taskresult.FieldErrorMessage)
}

// SetURL sets the "url" field.
func (m *TaskResultMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the value of the "url" field in the mutation.
func (m *TaskResultMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old "url" field's value of the TaskResult entity.
// If the TaskResult object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskResultMutation) OldURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ResetURL resets all changes to the "url" field.
func (m *TaskResultMutation) ResetURL() {
	m.url = nil
}

// SetMethod sets the "method" field.
func (m *TaskResultMutation) SetMethod(s string) {
	m.method = &s
}

// Method returns the value of the "method" field in the mutation.
func (m *TaskResultMutation) Method() (r string, exists bool) {
	v := m.method
	if v == nil {
		return
	}
	return *v, true
}

// OldMethod returns the old "method" field's value of the TaskResult entity.
// If the TaskResult object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskResultMutation) OldMethod(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMethod is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMethod requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMethod: %w", err)
	}
	return oldValue.Method, nil
}

// ResetMethod resets all changes to the "method" field.
func (m *TaskResultMutation) ResetMethod() {
	m.method = nil
}

// SetRequestContentType sets the "request_content_type" field.
func (m *TaskResultMutation) SetRequestContentType(s string) {
	m.request_content_type = &s
}

// RequestContentType returns the value of the "request_content_type" field in the mutation.
func (m *TaskResultMutation) RequestContentType() (r string, exists bool) {
	v := m.request_content_type
	if v == nil {
		return
	}
	return *v, true
}

// OldRequestContentType returns the old "request_content_type" field's value of the TaskResult entity.
// If the TaskResult object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskResultMutation) OldRequestContentType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRequestContentType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRequestContentType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRequestContentType: %w", err)
	}
	return oldValue.RequestContentType, nil
}

// ResetRequestContentType resets all changes to the "request_content_type" field.
func (m *TaskResultMutation) ResetRequestContentType() {
	m.request_content_type = nil
}

// SetRequestBody sets the "request_body" field.
func (m *TaskResultMutation) SetRequestBody(s string) {
	m.request_body = &s
}

// RequestBody returns the value of the "request_body" field in the mutation.
func (m *TaskResultMutation) RequestBody() (r string, exists bool) {
	v := m.request_body
	if v == nil {
		return
	}
	return *v, true
}

// OldRequestBody returns the old "request_body" field's value of the TaskResult entity.
// If the TaskResult object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskResultMutation) OldRequestBody(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRequestBody is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRequestBody requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRequestBody: %w", err)
	}
	return oldValue.RequestBody, nil
}

// ClearRequestBody clears the value of the "request_body" field.
func (m *TaskResultMutation) ClearRequestBody() {
	m.request_body = nil
	m.clearedFields[taskresult.FieldRequestBody] = struct{}{}
}

// RequestBodyCleared returns if the "request_body" field was cleared in this mutation.
func (m *TaskResultMutation) RequestBodyCleared() bool {
	_, ok := m.clearedFields[taskresult.FieldRequestBody]
	return ok
}

// ResetRequestBody resets all changes to the "request_body" field.
func (m *TaskResultMutation) ResetRequestBody() {
	m.request_body = nil
	delete(m.clearedFields, taskresult.FieldRequestBody)
}

// SetThreadNum sets the "thread_num" field.
func (m *TaskResultMutation) SetThreadNum(i int) {
	m.thread_num = &i
	m.addthread_num = nil
}

// ThreadNum returns the value of the "thread_num" field in the mutation.
func (m *TaskResultMutation) ThreadNum() (r int, exists bool) {
	v := m.thread_num
	if v == nil {
		return
	}
	return *v, true
}

// OldThreadNum returns the old "thread_num" field's value of the TaskResult entity.
// If the TaskResult object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskResultMutation) OldThreadNum(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldThreadNum is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldThreadNum requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldThreadNum: %w", err)
	}
	return oldValue.ThreadNum, nil
}

// AddThreadNum adds i to the "thread_num" field.
func (m *TaskResultMutation) AddThreadNum(i int) {
	if m.addthread_num != nil {
		*m.addthread_num += i
	} else {
		m.addthread_num = &i
	}
}

// AddedThreadNum returns the value that was added to the "thread_num" field in this mutation.
func (m *TaskResultMutation) AddedThreadNum() (r int, exists bool) {
	v := m.addthread_num
	if v == nil {
		return
	}
	return *v, true
}

// ResetThreadNum resets all changes to the "thread_num" field.
func (m *TaskResultMutation) ResetThreadNum() {
	m.thread_num = nil
	m.addthread_num = nil
}

// SetAttemptCount sets the "attempt_count" field.
func (m *TaskResultMutation) SetAttemptCount(i int) {
	m.attempt_count = &i
	m.addattempt_count = nil
}

// AttemptCount returns the value of the "attempt_count" field in the mutation.
func (m *TaskResultMutation) AttemptCount() (r int, exists bool) {
	v := m.attempt_count
	if v == nil {
		return
	}
	return *v, true
}

// OldAttemptCount returns the old "attempt_count" field's value of the TaskResult entity.
// If the TaskResult object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskResultMutation) OldAttemptCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAttemptCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAttemptCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAttemptCount: %w", err)
	}
	return oldValue.AttemptCount, nil
}

// AddAttemptCount adds i to the "attempt_count" field.
func (m *TaskResultMutation) AddAttemptCount(i int) {
	if m.addattempt_count != nil {
		*m.addattempt_count += i
	} else {
		m.addattempt_count = &i
	}
}

// AddedAttemptCount returns the value that was added to the "attempt_count" field in this mutation.
func (m *TaskResultMutation) AddedAttemptCount() (r int, exists bool) {
	v := m.addattempt_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetAttemptCount resets all changes to the "attempt_count" field.
func (m *TaskResultMutation) ResetAttemptCount() {
	m.attempt_count = nil
	m.addattempt_count = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *TaskResultMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TaskResultMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the TaskResult entity.
// If the TaskResult object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskResultMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TaskResultMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *TaskResultMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *TaskResultMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the TaskResult entity.
// If the TaskResult object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskResultMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *TaskResultMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[taskresult.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *TaskResultMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[taskresult.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *TaskResultMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, taskresult.FieldDeletedAt)
}

// Where appends a list predicates to the TaskResultMutation builder.
func (m *TaskResultMutation) Where(ps ...predicate.TaskResult) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TaskResultMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TaskResultMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.TaskResult, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TaskResultMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TaskResultMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (TaskResult).
func (m *TaskResultMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TaskResultMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.request_per_sec != nil {
		fields = append(fields, taskresult.FieldRequestPerSec)
	}
	if m.error_message != nil {
		fields = append(fields, taskresult.FieldErrorMessage)
	}
	if m.url != nil {
		fields = append(fields, taskresult.FieldURL)
	}
	if m.method != nil {
		fields = append(fields, taskresult.FieldMethod)
	}
	if m.request_content_type != nil {
		fields = append(fields, taskresult.FieldRequestContentType)
	}
	if m.request_body != nil {
		fields = append(fields, taskresult.FieldRequestBody)
	}
	if m.thread_num != nil {
		fields = append(fields, taskresult.FieldThreadNum)
	}
	if m.attempt_count != nil {
		fields = append(fields, taskresult.FieldAttemptCount)
	}
	if m.created_at != nil {
		fields = append(fields, taskresult.FieldCreatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, taskresult.FieldDeletedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TaskResultMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case taskresult.FieldRequestPerSec:
		return m.RequestPerSec()
	case taskresult.FieldErrorMessage:
		return m.ErrorMessage()
	case taskresult.FieldURL:
		return m.URL()
	case taskresult.FieldMethod:
		return m.Method()
	case taskresult.FieldRequestContentType:
		return m.RequestContentType()
	case taskresult.FieldRequestBody:
		return m.RequestBody()
	case taskresult.FieldThreadNum:
		return m.ThreadNum()
	case taskresult.FieldAttemptCount:
		return m.AttemptCount()
	case taskresult.FieldCreatedAt:
		return m.CreatedAt()
	case taskresult.FieldDeletedAt:
		return m.DeletedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TaskResultMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case taskresult.FieldRequestPerSec:
		return m.OldRequestPerSec(ctx)
	case taskresult.FieldErrorMessage:
		return m.OldErrorMessage(ctx)
	case taskresult.FieldURL:
		return m.OldURL(ctx)
	case taskresult.FieldMethod:
		return m.OldMethod(ctx)
	case taskresult.FieldRequestContentType:
		return m.OldRequestContentType(ctx)
	case taskresult.FieldRequestBody:
		return m.OldRequestBody(ctx)
	case taskresult.FieldThreadNum:
		return m.OldThreadNum(ctx)
	case taskresult.FieldAttemptCount:
		return m.OldAttemptCount(ctx)
	case taskresult.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case taskresult.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	}
	return nil, fmt.Errorf("unknown TaskResult field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskResultMutation) SetField(name string, value ent.Value) error {
	switch name {
	case taskresult.FieldRequestPerSec:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRequestPerSec(v)
		return nil
	case taskresult.FieldErrorMessage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetErrorMessage(v)
		return nil
	case taskresult.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	case taskresult.FieldMethod:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMethod(v)
		return nil
	case taskresult.FieldRequestContentType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRequestContentType(v)
		return nil
	case taskresult.FieldRequestBody:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRequestBody(v)
		return nil
	case taskresult.FieldThreadNum:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetThreadNum(v)
		return nil
	case taskresult.FieldAttemptCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAttemptCount(v)
		return nil
	case taskresult.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case taskresult.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown TaskResult field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TaskResultMutation) AddedFields() []string {
	var fields []string
	if m.addrequest_per_sec != nil {
		fields = append(fields, taskresult.FieldRequestPerSec)
	}
	if m.addthread_num != nil {
		fields = append(fields, taskresult.FieldThreadNum)
	}
	if m.addattempt_count != nil {
		fields = append(fields, taskresult.FieldAttemptCount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TaskResultMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case taskresult.FieldRequestPerSec:
		return m.AddedRequestPerSec()
	case taskresult.FieldThreadNum:
		return m.AddedThreadNum()
	case taskresult.FieldAttemptCount:
		return m.AddedAttemptCount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskResultMutation) AddField(name string, value ent.Value) error {
	switch name {
	case taskresult.FieldRequestPerSec:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRequestPerSec(v)
		return nil
	case taskresult.FieldThreadNum:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddThreadNum(v)
		return nil
	case taskresult.FieldAttemptCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAttemptCount(v)
		return nil
	}
	return fmt.Errorf("unknown TaskResult numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TaskResultMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(taskresult.FieldErrorMessage) {
		fields = append(fields, taskresult.FieldErrorMessage)
	}
	if m.FieldCleared(taskresult.FieldRequestBody) {
		fields = append(fields, taskresult.FieldRequestBody)
	}
	if m.FieldCleared(taskresult.FieldDeletedAt) {
		fields = append(fields, taskresult.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TaskResultMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TaskResultMutation) ClearField(name string) error {
	switch name {
	case taskresult.FieldErrorMessage:
		m.ClearErrorMessage()
		return nil
	case taskresult.FieldRequestBody:
		m.ClearRequestBody()
		return nil
	case taskresult.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown TaskResult nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TaskResultMutation) ResetField(name string) error {
	switch name {
	case taskresult.FieldRequestPerSec:
		m.ResetRequestPerSec()
		return nil
	case taskresult.FieldErrorMessage:
		m.ResetErrorMessage()
		return nil
	case taskresult.FieldURL:
		m.ResetURL()
		return nil
	case taskresult.FieldMethod:
		m.ResetMethod()
		return nil
	case taskresult.FieldRequestContentType:
		m.ResetRequestContentType()
		return nil
	case taskresult.FieldRequestBody:
		m.ResetRequestBody()
		return nil
	case taskresult.FieldThreadNum:
		m.ResetThreadNum()
		return nil
	case taskresult.FieldAttemptCount:
		m.ResetAttemptCount()
		return nil
	case taskresult.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case taskresult.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown TaskResult field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TaskResultMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TaskResultMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TaskResultMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TaskResultMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TaskResultMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TaskResultMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TaskResultMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown TaskResult unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TaskResultMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown TaskResult edge %s", name)
}
