// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ohkilab/SU-CSexpA-benchmark-system/backend/ent/tagresult"
)

// TagResult is the model entity for the TagResult schema.
type TagResult struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Score holds the value of the "score" field.
	Score int `json:"score,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt          time.Time `json:"deleted_at,omitempty"`
	submit_tag_results *string
	selectValues       sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TagResult) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tagresult.FieldID, tagresult.FieldScore:
			values[i] = new(sql.NullInt64)
		case tagresult.FieldName:
			values[i] = new(sql.NullString)
		case tagresult.FieldCreatedAt, tagresult.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case tagresult.ForeignKeys[0]: // submit_tag_results
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TagResult fields.
func (tr *TagResult) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tagresult.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tr.ID = int(value.Int64)
		case tagresult.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				tr.Name = value.String
			}
		case tagresult.FieldScore:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field score", values[i])
			} else if value.Valid {
				tr.Score = int(value.Int64)
			}
		case tagresult.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tr.CreatedAt = value.Time
			}
		case tagresult.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				tr.DeletedAt = value.Time
			}
		case tagresult.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field submit_tag_results", values[i])
			} else if value.Valid {
				tr.submit_tag_results = new(string)
				*tr.submit_tag_results = value.String
			}
		default:
			tr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TagResult.
// This includes values selected through modifiers, order, etc.
func (tr *TagResult) Value(name string) (ent.Value, error) {
	return tr.selectValues.Get(name)
}

// Update returns a builder for updating this TagResult.
// Note that you need to call TagResult.Unwrap() before calling this method if this TagResult
// was returned from a transaction, and the transaction was committed or rolled back.
func (tr *TagResult) Update() *TagResultUpdateOne {
	return NewTagResultClient(tr.config).UpdateOne(tr)
}

// Unwrap unwraps the TagResult entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tr *TagResult) Unwrap() *TagResult {
	_tx, ok := tr.config.driver.(*txDriver)
	if !ok {
		panic("ent: TagResult is not a transactional entity")
	}
	tr.config.driver = _tx.drv
	return tr
}

// String implements the fmt.Stringer.
func (tr *TagResult) String() string {
	var builder strings.Builder
	builder.WriteString("TagResult(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tr.ID))
	builder.WriteString("name=")
	builder.WriteString(tr.Name)
	builder.WriteString(", ")
	builder.WriteString("score=")
	builder.WriteString(fmt.Sprintf("%v", tr.Score))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(tr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(tr.DeletedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// TagResults is a parsable slice of TagResult.
type TagResults []*TagResult
