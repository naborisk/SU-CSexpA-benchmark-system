// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ohkilab/SU-CSexpA-benchmark-system/backend/ent/tagresult"
)

// TagResultCreate is the builder for creating a TagResult entity.
type TagResultCreate struct {
	config
	mutation *TagResultMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (trc *TagResultCreate) SetName(s string) *TagResultCreate {
	trc.mutation.SetName(s)
	return trc
}

// SetScore sets the "score" field.
func (trc *TagResultCreate) SetScore(i int) *TagResultCreate {
	trc.mutation.SetScore(i)
	return trc
}

// SetCreatedAt sets the "created_at" field.
func (trc *TagResultCreate) SetCreatedAt(t time.Time) *TagResultCreate {
	trc.mutation.SetCreatedAt(t)
	return trc
}

// SetDeletedAt sets the "deleted_at" field.
func (trc *TagResultCreate) SetDeletedAt(t time.Time) *TagResultCreate {
	trc.mutation.SetDeletedAt(t)
	return trc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (trc *TagResultCreate) SetNillableDeletedAt(t *time.Time) *TagResultCreate {
	if t != nil {
		trc.SetDeletedAt(*t)
	}
	return trc
}

// Mutation returns the TagResultMutation object of the builder.
func (trc *TagResultCreate) Mutation() *TagResultMutation {
	return trc.mutation
}

// Save creates the TagResult in the database.
func (trc *TagResultCreate) Save(ctx context.Context) (*TagResult, error) {
	return withHooks[*TagResult, TagResultMutation](ctx, trc.sqlSave, trc.mutation, trc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (trc *TagResultCreate) SaveX(ctx context.Context) *TagResult {
	v, err := trc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (trc *TagResultCreate) Exec(ctx context.Context) error {
	_, err := trc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (trc *TagResultCreate) ExecX(ctx context.Context) {
	if err := trc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (trc *TagResultCreate) check() error {
	if _, ok := trc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "TagResult.name"`)}
	}
	if _, ok := trc.mutation.Score(); !ok {
		return &ValidationError{Name: "score", err: errors.New(`ent: missing required field "TagResult.score"`)}
	}
	if _, ok := trc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "TagResult.created_at"`)}
	}
	return nil
}

func (trc *TagResultCreate) sqlSave(ctx context.Context) (*TagResult, error) {
	if err := trc.check(); err != nil {
		return nil, err
	}
	_node, _spec := trc.createSpec()
	if err := sqlgraph.CreateNode(ctx, trc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	trc.mutation.id = &_node.ID
	trc.mutation.done = true
	return _node, nil
}

func (trc *TagResultCreate) createSpec() (*TagResult, *sqlgraph.CreateSpec) {
	var (
		_node = &TagResult{config: trc.config}
		_spec = sqlgraph.NewCreateSpec(tagresult.Table, sqlgraph.NewFieldSpec(tagresult.FieldID, field.TypeInt))
	)
	if value, ok := trc.mutation.Name(); ok {
		_spec.SetField(tagresult.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := trc.mutation.Score(); ok {
		_spec.SetField(tagresult.FieldScore, field.TypeInt, value)
		_node.Score = value
	}
	if value, ok := trc.mutation.CreatedAt(); ok {
		_spec.SetField(tagresult.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := trc.mutation.DeletedAt(); ok {
		_spec.SetField(tagresult.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	return _node, _spec
}

// TagResultCreateBulk is the builder for creating many TagResult entities in bulk.
type TagResultCreateBulk struct {
	config
	builders []*TagResultCreate
}

// Save creates the TagResult entities in the database.
func (trcb *TagResultCreateBulk) Save(ctx context.Context) ([]*TagResult, error) {
	specs := make([]*sqlgraph.CreateSpec, len(trcb.builders))
	nodes := make([]*TagResult, len(trcb.builders))
	mutators := make([]Mutator, len(trcb.builders))
	for i := range trcb.builders {
		func(i int, root context.Context) {
			builder := trcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TagResultMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, trcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, trcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, trcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (trcb *TagResultCreateBulk) SaveX(ctx context.Context) []*TagResult {
	v, err := trcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (trcb *TagResultCreateBulk) Exec(ctx context.Context) error {
	_, err := trcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (trcb *TagResultCreateBulk) ExecX(ctx context.Context) {
	if err := trcb.Exec(ctx); err != nil {
		panic(err)
	}
}
