// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ohkilab/SU-CSexpA-benchmark-system/backend/repository/ent/submit"
	"github.com/ohkilab/SU-CSexpA-benchmark-system/backend/repository/ent/taskresult"
)

// TaskResultCreate is the builder for creating a TaskResult entity.
type TaskResultCreate struct {
	config
	mutation *TaskResultMutation
	hooks    []Hook
}

// SetRequestPerSec sets the "request_per_sec" field.
func (trc *TaskResultCreate) SetRequestPerSec(i int) *TaskResultCreate {
	trc.mutation.SetRequestPerSec(i)
	return trc
}

// SetStatus sets the "status" field.
func (trc *TaskResultCreate) SetStatus(s string) *TaskResultCreate {
	trc.mutation.SetStatus(s)
	return trc
}

// SetErrorMessage sets the "error_message" field.
func (trc *TaskResultCreate) SetErrorMessage(s string) *TaskResultCreate {
	trc.mutation.SetErrorMessage(s)
	return trc
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (trc *TaskResultCreate) SetNillableErrorMessage(s *string) *TaskResultCreate {
	if s != nil {
		trc.SetErrorMessage(*s)
	}
	return trc
}

// SetURL sets the "url" field.
func (trc *TaskResultCreate) SetURL(s string) *TaskResultCreate {
	trc.mutation.SetURL(s)
	return trc
}

// SetMethod sets the "method" field.
func (trc *TaskResultCreate) SetMethod(s string) *TaskResultCreate {
	trc.mutation.SetMethod(s)
	return trc
}

// SetRequestContentType sets the "request_content_type" field.
func (trc *TaskResultCreate) SetRequestContentType(s string) *TaskResultCreate {
	trc.mutation.SetRequestContentType(s)
	return trc
}

// SetRequestBody sets the "request_body" field.
func (trc *TaskResultCreate) SetRequestBody(s string) *TaskResultCreate {
	trc.mutation.SetRequestBody(s)
	return trc
}

// SetNillableRequestBody sets the "request_body" field if the given value is not nil.
func (trc *TaskResultCreate) SetNillableRequestBody(s *string) *TaskResultCreate {
	if s != nil {
		trc.SetRequestBody(*s)
	}
	return trc
}

// SetThreadNum sets the "thread_num" field.
func (trc *TaskResultCreate) SetThreadNum(i int) *TaskResultCreate {
	trc.mutation.SetThreadNum(i)
	return trc
}

// SetAttemptCount sets the "attempt_count" field.
func (trc *TaskResultCreate) SetAttemptCount(i int) *TaskResultCreate {
	trc.mutation.SetAttemptCount(i)
	return trc
}

// SetCreatedAt sets the "created_at" field.
func (trc *TaskResultCreate) SetCreatedAt(t time.Time) *TaskResultCreate {
	trc.mutation.SetCreatedAt(t)
	return trc
}

// SetDeletedAt sets the "deleted_at" field.
func (trc *TaskResultCreate) SetDeletedAt(t time.Time) *TaskResultCreate {
	trc.mutation.SetDeletedAt(t)
	return trc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (trc *TaskResultCreate) SetNillableDeletedAt(t *time.Time) *TaskResultCreate {
	if t != nil {
		trc.SetDeletedAt(*t)
	}
	return trc
}

// SetID sets the "id" field.
func (trc *TaskResultCreate) SetID(i int) *TaskResultCreate {
	trc.mutation.SetID(i)
	return trc
}

// SetSubmitsID sets the "submits" edge to the Submit entity by ID.
func (trc *TaskResultCreate) SetSubmitsID(id int) *TaskResultCreate {
	trc.mutation.SetSubmitsID(id)
	return trc
}

// SetNillableSubmitsID sets the "submits" edge to the Submit entity by ID if the given value is not nil.
func (trc *TaskResultCreate) SetNillableSubmitsID(id *int) *TaskResultCreate {
	if id != nil {
		trc = trc.SetSubmitsID(*id)
	}
	return trc
}

// SetSubmits sets the "submits" edge to the Submit entity.
func (trc *TaskResultCreate) SetSubmits(s *Submit) *TaskResultCreate {
	return trc.SetSubmitsID(s.ID)
}

// Mutation returns the TaskResultMutation object of the builder.
func (trc *TaskResultCreate) Mutation() *TaskResultMutation {
	return trc.mutation
}

// Save creates the TaskResult in the database.
func (trc *TaskResultCreate) Save(ctx context.Context) (*TaskResult, error) {
	return withHooks(ctx, trc.sqlSave, trc.mutation, trc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (trc *TaskResultCreate) SaveX(ctx context.Context) *TaskResult {
	v, err := trc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (trc *TaskResultCreate) Exec(ctx context.Context) error {
	_, err := trc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (trc *TaskResultCreate) ExecX(ctx context.Context) {
	if err := trc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (trc *TaskResultCreate) check() error {
	if _, ok := trc.mutation.RequestPerSec(); !ok {
		return &ValidationError{Name: "request_per_sec", err: errors.New(`ent: missing required field "TaskResult.request_per_sec"`)}
	}
	if _, ok := trc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "TaskResult.status"`)}
	}
	if _, ok := trc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "TaskResult.url"`)}
	}
	if _, ok := trc.mutation.Method(); !ok {
		return &ValidationError{Name: "method", err: errors.New(`ent: missing required field "TaskResult.method"`)}
	}
	if _, ok := trc.mutation.RequestContentType(); !ok {
		return &ValidationError{Name: "request_content_type", err: errors.New(`ent: missing required field "TaskResult.request_content_type"`)}
	}
	if _, ok := trc.mutation.ThreadNum(); !ok {
		return &ValidationError{Name: "thread_num", err: errors.New(`ent: missing required field "TaskResult.thread_num"`)}
	}
	if _, ok := trc.mutation.AttemptCount(); !ok {
		return &ValidationError{Name: "attempt_count", err: errors.New(`ent: missing required field "TaskResult.attempt_count"`)}
	}
	if _, ok := trc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "TaskResult.created_at"`)}
	}
	return nil
}

func (trc *TaskResultCreate) sqlSave(ctx context.Context) (*TaskResult, error) {
	if err := trc.check(); err != nil {
		return nil, err
	}
	_node, _spec := trc.createSpec()
	if err := sqlgraph.CreateNode(ctx, trc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	trc.mutation.id = &_node.ID
	trc.mutation.done = true
	return _node, nil
}

func (trc *TaskResultCreate) createSpec() (*TaskResult, *sqlgraph.CreateSpec) {
	var (
		_node = &TaskResult{config: trc.config}
		_spec = sqlgraph.NewCreateSpec(taskresult.Table, sqlgraph.NewFieldSpec(taskresult.FieldID, field.TypeInt))
	)
	if id, ok := trc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := trc.mutation.RequestPerSec(); ok {
		_spec.SetField(taskresult.FieldRequestPerSec, field.TypeInt, value)
		_node.RequestPerSec = value
	}
	if value, ok := trc.mutation.Status(); ok {
		_spec.SetField(taskresult.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := trc.mutation.ErrorMessage(); ok {
		_spec.SetField(taskresult.FieldErrorMessage, field.TypeString, value)
		_node.ErrorMessage = value
	}
	if value, ok := trc.mutation.URL(); ok {
		_spec.SetField(taskresult.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := trc.mutation.Method(); ok {
		_spec.SetField(taskresult.FieldMethod, field.TypeString, value)
		_node.Method = value
	}
	if value, ok := trc.mutation.RequestContentType(); ok {
		_spec.SetField(taskresult.FieldRequestContentType, field.TypeString, value)
		_node.RequestContentType = value
	}
	if value, ok := trc.mutation.RequestBody(); ok {
		_spec.SetField(taskresult.FieldRequestBody, field.TypeString, value)
		_node.RequestBody = value
	}
	if value, ok := trc.mutation.ThreadNum(); ok {
		_spec.SetField(taskresult.FieldThreadNum, field.TypeInt, value)
		_node.ThreadNum = value
	}
	if value, ok := trc.mutation.AttemptCount(); ok {
		_spec.SetField(taskresult.FieldAttemptCount, field.TypeInt, value)
		_node.AttemptCount = value
	}
	if value, ok := trc.mutation.CreatedAt(); ok {
		_spec.SetField(taskresult.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := trc.mutation.DeletedAt(); ok {
		_spec.SetField(taskresult.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if nodes := trc.mutation.SubmitsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskresult.SubmitsTable,
			Columns: []string{taskresult.SubmitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(submit.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.submit_task_results = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TaskResultCreateBulk is the builder for creating many TaskResult entities in bulk.
type TaskResultCreateBulk struct {
	config
	builders []*TaskResultCreate
}

// Save creates the TaskResult entities in the database.
func (trcb *TaskResultCreateBulk) Save(ctx context.Context) ([]*TaskResult, error) {
	specs := make([]*sqlgraph.CreateSpec, len(trcb.builders))
	nodes := make([]*TaskResult, len(trcb.builders))
	mutators := make([]Mutator, len(trcb.builders))
	for i := range trcb.builders {
		func(i int, root context.Context) {
			builder := trcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TaskResultMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, trcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, trcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, trcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (trcb *TaskResultCreateBulk) SaveX(ctx context.Context) []*TaskResult {
	v, err := trcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (trcb *TaskResultCreateBulk) Exec(ctx context.Context) error {
	_, err := trcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (trcb *TaskResultCreateBulk) ExecX(ctx context.Context) {
	if err := trcb.Exec(ctx); err != nil {
		panic(err)
	}
}
