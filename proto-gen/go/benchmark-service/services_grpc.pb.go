// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: benchmark-service/services.proto

package benchmark

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BenchmarkService_CreateTask_FullMethodName = "/BenchmarkService/CreateTask"
)

// BenchmarkServiceClient is the client API for BenchmarkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BenchmarkServiceClient interface {
	CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (BenchmarkService_CreateTaskClient, error)
}

type benchmarkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBenchmarkServiceClient(cc grpc.ClientConnInterface) BenchmarkServiceClient {
	return &benchmarkServiceClient{cc}
}

func (c *benchmarkServiceClient) CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (BenchmarkService_CreateTaskClient, error) {
	stream, err := c.cc.NewStream(ctx, &BenchmarkService_ServiceDesc.Streams[0], BenchmarkService_CreateTask_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &benchmarkServiceCreateTaskClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BenchmarkService_CreateTaskClient interface {
	Recv() (*CreateTaskResponse, error)
	grpc.ClientStream
}

type benchmarkServiceCreateTaskClient struct {
	grpc.ClientStream
}

func (x *benchmarkServiceCreateTaskClient) Recv() (*CreateTaskResponse, error) {
	m := new(CreateTaskResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BenchmarkServiceServer is the server API for BenchmarkService service.
// All implementations must embed UnimplementedBenchmarkServiceServer
// for forward compatibility
type BenchmarkServiceServer interface {
	CreateTask(*CreateTaskRequest, BenchmarkService_CreateTaskServer) error
	mustEmbedUnimplementedBenchmarkServiceServer()
}

// UnimplementedBenchmarkServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBenchmarkServiceServer struct {
}

func (UnimplementedBenchmarkServiceServer) CreateTask(*CreateTaskRequest, BenchmarkService_CreateTaskServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedBenchmarkServiceServer) mustEmbedUnimplementedBenchmarkServiceServer() {}

// UnsafeBenchmarkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BenchmarkServiceServer will
// result in compilation errors.
type UnsafeBenchmarkServiceServer interface {
	mustEmbedUnimplementedBenchmarkServiceServer()
}

func RegisterBenchmarkServiceServer(s grpc.ServiceRegistrar, srv BenchmarkServiceServer) {
	s.RegisterService(&BenchmarkService_ServiceDesc, srv)
}

func _BenchmarkService_CreateTask_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CreateTaskRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BenchmarkServiceServer).CreateTask(m, &benchmarkServiceCreateTaskServer{stream})
}

type BenchmarkService_CreateTaskServer interface {
	Send(*CreateTaskResponse) error
	grpc.ServerStream
}

type benchmarkServiceCreateTaskServer struct {
	grpc.ServerStream
}

func (x *benchmarkServiceCreateTaskServer) Send(m *CreateTaskResponse) error {
	return x.ServerStream.SendMsg(m)
}

// BenchmarkService_ServiceDesc is the grpc.ServiceDesc for BenchmarkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BenchmarkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BenchmarkService",
	HandlerType: (*BenchmarkServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateTask",
			Handler:       _BenchmarkService_CreateTask_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "benchmark-service/services.proto",
}
