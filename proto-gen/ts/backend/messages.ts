/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.12
 * source: backend/messages.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../google/protobuf/timestamp";
import * as pb_1 from "google-protobuf";
export enum Language {
    PHP = 0,
    GO = 1,
    RUST = 2,
    JAVASCRIPT = 3,
    CSHARP = 4,
    CPP = 5,
    RUBY = 6,
    PYTHON = 7
}
export class GetRankingResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        rank?: number;
        group?: Group;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("rank" in data && data.rank != undefined) {
                this.rank = data.rank;
            }
            if ("group" in data && data.group != undefined) {
                this.group = data.group;
            }
        }
    }
    get rank() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set rank(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get group() {
        return pb_1.Message.getWrapperField(this, Group, 2) as Group;
    }
    set group(value: Group) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_group() {
        return pb_1.Message.getField(this, 2) != null;
    }
    static fromObject(data: {
        rank?: number;
        group?: ReturnType<typeof Group.prototype.toObject>;
    }): GetRankingResponse {
        const message = new GetRankingResponse({});
        if (data.rank != null) {
            message.rank = data.rank;
        }
        if (data.group != null) {
            message.group = Group.fromObject(data.group);
        }
        return message;
    }
    toObject() {
        const data: {
            rank?: number;
            group?: ReturnType<typeof Group.prototype.toObject>;
        } = {};
        if (this.rank != null) {
            data.rank = this.rank;
        }
        if (this.group != null) {
            data.group = this.group.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.rank != 0)
            writer.writeInt32(1, this.rank);
        if (this.has_group)
            writer.writeMessage(2, this.group, () => this.group.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetRankingResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetRankingResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.rank = reader.readInt32();
                    break;
                case 2:
                    reader.readMessage(message.group, () => message.group = Group.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetRankingResponse {
        return GetRankingResponse.deserialize(bytes);
    }
}
export class GetGroupRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        group_id?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("group_id" in data && data.group_id != undefined) {
                this.group_id = data.group_id;
            }
        }
    }
    get group_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set group_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        group_id?: string;
    }): GetGroupRequest {
        const message = new GetGroupRequest({});
        if (data.group_id != null) {
            message.group_id = data.group_id;
        }
        return message;
    }
    toObject() {
        const data: {
            group_id?: string;
        } = {};
        if (this.group_id != null) {
            data.group_id = this.group_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.group_id.length)
            writer.writeString(1, this.group_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetGroupRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetGroupRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.group_id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetGroupRequest {
        return GetGroupRequest.deserialize(bytes);
    }
}
export class GetGroupResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        group?: Group;
        score_histories?: ScoreHistory[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("group" in data && data.group != undefined) {
                this.group = data.group;
            }
            if ("score_histories" in data && data.score_histories != undefined) {
                this.score_histories = data.score_histories;
            }
        }
    }
    get group() {
        return pb_1.Message.getWrapperField(this, Group, 1) as Group;
    }
    set group(value: Group) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_group() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get score_histories() {
        return pb_1.Message.getRepeatedWrapperField(this, ScoreHistory, 2) as ScoreHistory[];
    }
    set score_histories(value: ScoreHistory[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    static fromObject(data: {
        group?: ReturnType<typeof Group.prototype.toObject>;
        score_histories?: ReturnType<typeof ScoreHistory.prototype.toObject>[];
    }): GetGroupResponse {
        const message = new GetGroupResponse({});
        if (data.group != null) {
            message.group = Group.fromObject(data.group);
        }
        if (data.score_histories != null) {
            message.score_histories = data.score_histories.map(item => ScoreHistory.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            group?: ReturnType<typeof Group.prototype.toObject>;
            score_histories?: ReturnType<typeof ScoreHistory.prototype.toObject>[];
        } = {};
        if (this.group != null) {
            data.group = this.group.toObject();
        }
        if (this.score_histories != null) {
            data.score_histories = this.score_histories.map((item: ScoreHistory) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_group)
            writer.writeMessage(1, this.group, () => this.group.serialize(writer));
        if (this.score_histories.length)
            writer.writeRepeatedMessage(2, this.score_histories, (item: ScoreHistory) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetGroupResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetGroupResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.group, () => message.group = Group.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.score_histories, () => pb_1.Message.addToRepeatedWrapperField(message, 2, ScoreHistory.deserialize(reader), ScoreHistory));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetGroupResponse {
        return GetGroupResponse.deserialize(bytes);
    }
}
export class Group extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        name?: string;
        highest_score?: number;
        updated_at?: dependency_1.google.protobuf.Timestamp;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("highest_score" in data && data.highest_score != undefined) {
                this.highest_score = data.highest_score;
            }
            if ("updated_at" in data && data.updated_at != undefined) {
                this.updated_at = data.updated_at;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get highest_score() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set highest_score(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get updated_at() {
        return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 4) as dependency_1.google.protobuf.Timestamp;
    }
    set updated_at(value: dependency_1.google.protobuf.Timestamp) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    get has_updated_at() {
        return pb_1.Message.getField(this, 4) != null;
    }
    static fromObject(data: {
        id?: string;
        name?: string;
        highest_score?: number;
        updated_at?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
    }): Group {
        const message = new Group({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.highest_score != null) {
            message.highest_score = data.highest_score;
        }
        if (data.updated_at != null) {
            message.updated_at = dependency_1.google.protobuf.Timestamp.fromObject(data.updated_at);
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            name?: string;
            highest_score?: number;
            updated_at?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.highest_score != null) {
            data.highest_score = this.highest_score;
        }
        if (this.updated_at != null) {
            data.updated_at = this.updated_at.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.name.length)
            writer.writeString(2, this.name);
        if (this.highest_score != 0)
            writer.writeInt32(3, this.highest_score);
        if (this.has_updated_at)
            writer.writeMessage(4, this.updated_at, () => this.updated_at.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Group {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Group();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.name = reader.readString();
                    break;
                case 3:
                    message.highest_score = reader.readInt32();
                    break;
                case 4:
                    reader.readMessage(message.updated_at, () => message.updated_at = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Group {
        return Group.deserialize(bytes);
    }
}
export class ScoreHistory extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        group_id?: string;
        score?: number;
        language?: Language;
        created_at?: dependency_1.google.protobuf.Timestamp;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("group_id" in data && data.group_id != undefined) {
                this.group_id = data.group_id;
            }
            if ("score" in data && data.score != undefined) {
                this.score = data.score;
            }
            if ("language" in data && data.language != undefined) {
                this.language = data.language;
            }
            if ("created_at" in data && data.created_at != undefined) {
                this.created_at = data.created_at;
            }
        }
    }
    get group_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set group_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get score() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set score(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get language() {
        return pb_1.Message.getFieldWithDefault(this, 3, Language.PHP) as Language;
    }
    set language(value: Language) {
        pb_1.Message.setField(this, 3, value);
    }
    get created_at() {
        return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 4) as dependency_1.google.protobuf.Timestamp;
    }
    set created_at(value: dependency_1.google.protobuf.Timestamp) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    get has_created_at() {
        return pb_1.Message.getField(this, 4) != null;
    }
    static fromObject(data: {
        group_id?: string;
        score?: number;
        language?: Language;
        created_at?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
    }): ScoreHistory {
        const message = new ScoreHistory({});
        if (data.group_id != null) {
            message.group_id = data.group_id;
        }
        if (data.score != null) {
            message.score = data.score;
        }
        if (data.language != null) {
            message.language = data.language;
        }
        if (data.created_at != null) {
            message.created_at = dependency_1.google.protobuf.Timestamp.fromObject(data.created_at);
        }
        return message;
    }
    toObject() {
        const data: {
            group_id?: string;
            score?: number;
            language?: Language;
            created_at?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        } = {};
        if (this.group_id != null) {
            data.group_id = this.group_id;
        }
        if (this.score != null) {
            data.score = this.score;
        }
        if (this.language != null) {
            data.language = this.language;
        }
        if (this.created_at != null) {
            data.created_at = this.created_at.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.group_id.length)
            writer.writeString(1, this.group_id);
        if (this.score != 0)
            writer.writeInt32(2, this.score);
        if (this.language != Language.PHP)
            writer.writeEnum(3, this.language);
        if (this.has_created_at)
            writer.writeMessage(4, this.created_at, () => this.created_at.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ScoreHistory {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ScoreHistory();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.group_id = reader.readString();
                    break;
                case 2:
                    message.score = reader.readInt32();
                    break;
                case 3:
                    message.language = reader.readEnum();
                    break;
                case 4:
                    reader.readMessage(message.created_at, () => message.created_at = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ScoreHistory {
        return ScoreHistory.deserialize(bytes);
    }
}
