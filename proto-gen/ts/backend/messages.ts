/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.12
 * source: backend/messages.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./resources";
import * as dependency_2 from "./../google/protobuf/timestamp";
import * as pb_1 from "google-protobuf";
export class PostLoginRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        password?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("password" in data && data.password != undefined) {
                this.password = data.password;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get password() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set password(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        id?: string;
        password?: string;
    }): PostLoginRequest {
        const message = new PostLoginRequest({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.password != null) {
            message.password = data.password;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            password?: string;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.password != null) {
            data.password = this.password;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.password.length)
            writer.writeString(2, this.password);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PostLoginRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PostLoginRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.password = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): PostLoginRequest {
        return PostLoginRequest.deserialize(bytes);
    }
}
export class PostLoginResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        group?: dependency_1.Group;
        token?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("group" in data && data.group != undefined) {
                this.group = data.group;
            }
            if ("token" in data && data.token != undefined) {
                this.token = data.token;
            }
        }
    }
    get group() {
        return pb_1.Message.getWrapperField(this, dependency_1.Group, 1) as dependency_1.Group;
    }
    set group(value: dependency_1.Group) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_group() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get token() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set token(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        group?: ReturnType<typeof dependency_1.Group.prototype.toObject>;
        token?: string;
    }): PostLoginResponse {
        const message = new PostLoginResponse({});
        if (data.group != null) {
            message.group = dependency_1.Group.fromObject(data.group);
        }
        if (data.token != null) {
            message.token = data.token;
        }
        return message;
    }
    toObject() {
        const data: {
            group?: ReturnType<typeof dependency_1.Group.prototype.toObject>;
            token?: string;
        } = {};
        if (this.group != null) {
            data.group = this.group.toObject();
        }
        if (this.token != null) {
            data.token = this.token;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_group)
            writer.writeMessage(1, this.group, () => this.group.serialize(writer));
        if (this.token.length)
            writer.writeString(2, this.token);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PostLoginResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PostLoginResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.group, () => message.group = dependency_1.Group.deserialize(reader));
                    break;
                case 2:
                    message.token = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): PostLoginResponse {
        return PostLoginResponse.deserialize(bytes);
    }
}
export class PostSubmitRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        ip_addr?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("ip_addr" in data && data.ip_addr != undefined) {
                this.ip_addr = data.ip_addr;
            }
        }
    }
    get ip_addr() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set ip_addr(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        ip_addr?: string;
    }): PostSubmitRequest {
        const message = new PostSubmitRequest({});
        if (data.ip_addr != null) {
            message.ip_addr = data.ip_addr;
        }
        return message;
    }
    toObject() {
        const data: {
            ip_addr?: string;
        } = {};
        if (this.ip_addr != null) {
            data.ip_addr = this.ip_addr;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.ip_addr.length)
            writer.writeString(1, this.ip_addr);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PostSubmitRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PostSubmitRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.ip_addr = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): PostSubmitRequest {
        return PostSubmitRequest.deserialize(bytes);
    }
}
export class PostSubmitResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        ip_addr?: string;
        submited_at?: dependency_2.google.protobuf.Timestamp;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("ip_addr" in data && data.ip_addr != undefined) {
                this.ip_addr = data.ip_addr;
            }
            if ("submited_at" in data && data.submited_at != undefined) {
                this.submited_at = data.submited_at;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get ip_addr() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set ip_addr(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get submited_at() {
        return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Timestamp, 3) as dependency_2.google.protobuf.Timestamp;
    }
    set submited_at(value: dependency_2.google.protobuf.Timestamp) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_submited_at() {
        return pb_1.Message.getField(this, 3) != null;
    }
    static fromObject(data: {
        id?: string;
        ip_addr?: string;
        submited_at?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
    }): PostSubmitResponse {
        const message = new PostSubmitResponse({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.ip_addr != null) {
            message.ip_addr = data.ip_addr;
        }
        if (data.submited_at != null) {
            message.submited_at = dependency_2.google.protobuf.Timestamp.fromObject(data.submited_at);
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            ip_addr?: string;
            submited_at?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.ip_addr != null) {
            data.ip_addr = this.ip_addr;
        }
        if (this.submited_at != null) {
            data.submited_at = this.submited_at.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.ip_addr.length)
            writer.writeString(2, this.ip_addr);
        if (this.has_submited_at)
            writer.writeMessage(3, this.submited_at, () => this.submited_at.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PostSubmitResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PostSubmitResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.ip_addr = reader.readString();
                    break;
                case 3:
                    reader.readMessage(message.submited_at, () => message.submited_at = dependency_2.google.protobuf.Timestamp.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): PostSubmitResponse {
        return PostSubmitResponse.deserialize(bytes);
    }
}
export class GetSubmitRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        submit_id?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("submit_id" in data && data.submit_id != undefined) {
                this.submit_id = data.submit_id;
            }
        }
    }
    get submit_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set submit_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        submit_id?: string;
    }): GetSubmitRequest {
        const message = new GetSubmitRequest({});
        if (data.submit_id != null) {
            message.submit_id = data.submit_id;
        }
        return message;
    }
    toObject() {
        const data: {
            submit_id?: string;
        } = {};
        if (this.submit_id != null) {
            data.submit_id = this.submit_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.submit_id.length)
            writer.writeString(1, this.submit_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetSubmitRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetSubmitRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.submit_id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetSubmitRequest {
        return GetSubmitRequest.deserialize(bytes);
    }
}
export class GetSubmitResponse extends pb_1.Message {
    #one_of_decls: number[][] = [[1, 2]];
    constructor(data?: any[] | ({} & (({
        tag_progress?: GetSubmitResponse.TagProgress;
        submit?: never;
    } | {
        tag_progress?: never;
        submit?: dependency_1.Submit;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("tag_progress" in data && data.tag_progress != undefined) {
                this.tag_progress = data.tag_progress;
            }
            if ("submit" in data && data.submit != undefined) {
                this.submit = data.submit;
            }
        }
    }
    get tag_progress() {
        return pb_1.Message.getWrapperField(this, GetSubmitResponse.TagProgress, 1) as GetSubmitResponse.TagProgress;
    }
    set tag_progress(value: GetSubmitResponse.TagProgress) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get has_tag_progress() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get submit() {
        return pb_1.Message.getWrapperField(this, dependency_1.Submit, 2) as dependency_1.Submit;
    }
    set submit(value: dependency_1.Submit) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get has_submit() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get result() {
        const cases: {
            [index: number]: "none" | "tag_progress" | "submit";
        } = {
            0: "none",
            1: "tag_progress",
            2: "submit"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
    }
    static fromObject(data: {
        tag_progress?: ReturnType<typeof GetSubmitResponse.TagProgress.prototype.toObject>;
        submit?: ReturnType<typeof dependency_1.Submit.prototype.toObject>;
    }): GetSubmitResponse {
        const message = new GetSubmitResponse({});
        if (data.tag_progress != null) {
            message.tag_progress = GetSubmitResponse.TagProgress.fromObject(data.tag_progress);
        }
        if (data.submit != null) {
            message.submit = dependency_1.Submit.fromObject(data.submit);
        }
        return message;
    }
    toObject() {
        const data: {
            tag_progress?: ReturnType<typeof GetSubmitResponse.TagProgress.prototype.toObject>;
            submit?: ReturnType<typeof dependency_1.Submit.prototype.toObject>;
        } = {};
        if (this.tag_progress != null) {
            data.tag_progress = this.tag_progress.toObject();
        }
        if (this.submit != null) {
            data.submit = this.submit.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_tag_progress)
            writer.writeMessage(1, this.tag_progress, () => this.tag_progress.serialize(writer));
        if (this.has_submit)
            writer.writeMessage(2, this.submit, () => this.submit.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetSubmitResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetSubmitResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.tag_progress, () => message.tag_progress = GetSubmitResponse.TagProgress.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.submit, () => message.submit = dependency_1.Submit.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetSubmitResponse {
        return GetSubmitResponse.deserialize(bytes);
    }
}
export namespace GetSubmitResponse {
    export class TagProgress extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            submit_id?: string;
            score?: number;
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("submit_id" in data && data.submit_id != undefined) {
                    this.submit_id = data.submit_id;
                }
                if ("score" in data && data.score != undefined) {
                    this.score = data.score;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get submit_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set submit_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get score() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set score(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            submit_id?: string;
            score?: number;
            name?: string;
        }): TagProgress {
            const message = new TagProgress({});
            if (data.submit_id != null) {
                message.submit_id = data.submit_id;
            }
            if (data.score != null) {
                message.score = data.score;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                submit_id?: string;
                score?: number;
                name?: string;
            } = {};
            if (this.submit_id != null) {
                data.submit_id = this.submit_id;
            }
            if (this.score != null) {
                data.score = this.score;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.submit_id.length)
                writer.writeString(1, this.submit_id);
            if (this.score != 0)
                writer.writeInt32(2, this.score);
            if (this.name.length)
                writer.writeString(3, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TagProgress {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TagProgress();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.submit_id = reader.readString();
                        break;
                    case 2:
                        message.score = reader.readInt32();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TagProgress {
            return TagProgress.deserialize(bytes);
        }
    }
}
export class GetRankingRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        year?: number;
        contain_guest?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("year" in data && data.year != undefined) {
                this.year = data.year;
            }
            if ("contain_guest" in data && data.contain_guest != undefined) {
                this.contain_guest = data.contain_guest;
            }
        }
    }
    get year() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set year(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get contain_guest() {
        return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
    }
    set contain_guest(value: boolean) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        year?: number;
        contain_guest?: boolean;
    }): GetRankingRequest {
        const message = new GetRankingRequest({});
        if (data.year != null) {
            message.year = data.year;
        }
        if (data.contain_guest != null) {
            message.contain_guest = data.contain_guest;
        }
        return message;
    }
    toObject() {
        const data: {
            year?: number;
            contain_guest?: boolean;
        } = {};
        if (this.year != null) {
            data.year = this.year;
        }
        if (this.contain_guest != null) {
            data.contain_guest = this.contain_guest;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.year != 0)
            writer.writeInt32(1, this.year);
        if (this.contain_guest != false)
            writer.writeBool(2, this.contain_guest);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetRankingRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetRankingRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.year = reader.readInt32();
                    break;
                case 2:
                    message.contain_guest = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetRankingRequest {
        return GetRankingRequest.deserialize(bytes);
    }
}
export class GetRankingResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        records?: GetRankingResponse.Record[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("records" in data && data.records != undefined) {
                this.records = data.records;
            }
        }
    }
    get records() {
        return pb_1.Message.getRepeatedWrapperField(this, GetRankingResponse.Record, 1) as GetRankingResponse.Record[];
    }
    set records(value: GetRankingResponse.Record[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        records?: ReturnType<typeof GetRankingResponse.Record.prototype.toObject>[];
    }): GetRankingResponse {
        const message = new GetRankingResponse({});
        if (data.records != null) {
            message.records = data.records.map(item => GetRankingResponse.Record.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            records?: ReturnType<typeof GetRankingResponse.Record.prototype.toObject>[];
        } = {};
        if (this.records != null) {
            data.records = this.records.map((item: GetRankingResponse.Record) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.records.length)
            writer.writeRepeatedMessage(1, this.records, (item: GetRankingResponse.Record) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetRankingResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetRankingResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.records, () => pb_1.Message.addToRepeatedWrapperField(message, 1, GetRankingResponse.Record.deserialize(reader), GetRankingResponse.Record));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetRankingResponse {
        return GetRankingResponse.deserialize(bytes);
    }
}
export namespace GetRankingResponse {
    export class Record extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            rank?: number;
            group?: dependency_1.Group;
            score?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rank" in data && data.rank != undefined) {
                    this.rank = data.rank;
                }
                if ("group" in data && data.group != undefined) {
                    this.group = data.group;
                }
                if ("score" in data && data.score != undefined) {
                    this.score = data.score;
                }
            }
        }
        get rank() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set rank(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get group() {
            return pb_1.Message.getWrapperField(this, dependency_1.Group, 2) as dependency_1.Group;
        }
        set group(value: dependency_1.Group) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_group() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get score() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set score(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            rank?: number;
            group?: ReturnType<typeof dependency_1.Group.prototype.toObject>;
            score?: number;
        }): Record {
            const message = new Record({});
            if (data.rank != null) {
                message.rank = data.rank;
            }
            if (data.group != null) {
                message.group = dependency_1.Group.fromObject(data.group);
            }
            if (data.score != null) {
                message.score = data.score;
            }
            return message;
        }
        toObject() {
            const data: {
                rank?: number;
                group?: ReturnType<typeof dependency_1.Group.prototype.toObject>;
                score?: number;
            } = {};
            if (this.rank != null) {
                data.rank = this.rank;
            }
            if (this.group != null) {
                data.group = this.group.toObject();
            }
            if (this.score != null) {
                data.score = this.score;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.rank != 0)
                writer.writeInt32(1, this.rank);
            if (this.has_group)
                writer.writeMessage(2, this.group, () => this.group.serialize(writer));
            if (this.score != 0)
                writer.writeInt32(3, this.score);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Record {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Record();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.rank = reader.readInt32();
                        break;
                    case 2:
                        reader.readMessage(message.group, () => message.group = dependency_1.Group.deserialize(reader));
                        break;
                    case 3:
                        message.score = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Record {
            return Record.deserialize(bytes);
        }
    }
}
export class GetGroupRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        group_id?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("group_id" in data && data.group_id != undefined) {
                this.group_id = data.group_id;
            }
        }
    }
    get group_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set group_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        group_id?: string;
    }): GetGroupRequest {
        const message = new GetGroupRequest({});
        if (data.group_id != null) {
            message.group_id = data.group_id;
        }
        return message;
    }
    toObject() {
        const data: {
            group_id?: string;
        } = {};
        if (this.group_id != null) {
            data.group_id = this.group_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.group_id.length)
            writer.writeString(1, this.group_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetGroupRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetGroupRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.group_id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetGroupRequest {
        return GetGroupRequest.deserialize(bytes);
    }
}
export class GetGroupResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        groups?: GetGroupResponse.GroupInfo[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("groups" in data && data.groups != undefined) {
                this.groups = data.groups;
            }
        }
    }
    get groups() {
        return pb_1.Message.getRepeatedWrapperField(this, GetGroupResponse.GroupInfo, 1) as GetGroupResponse.GroupInfo[];
    }
    set groups(value: GetGroupResponse.GroupInfo[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        groups?: ReturnType<typeof GetGroupResponse.GroupInfo.prototype.toObject>[];
    }): GetGroupResponse {
        const message = new GetGroupResponse({});
        if (data.groups != null) {
            message.groups = data.groups.map(item => GetGroupResponse.GroupInfo.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            groups?: ReturnType<typeof GetGroupResponse.GroupInfo.prototype.toObject>[];
        } = {};
        if (this.groups != null) {
            data.groups = this.groups.map((item: GetGroupResponse.GroupInfo) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.groups.length)
            writer.writeRepeatedMessage(1, this.groups, (item: GetGroupResponse.GroupInfo) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetGroupResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetGroupResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.groups, () => pb_1.Message.addToRepeatedWrapperField(message, 1, GetGroupResponse.GroupInfo.deserialize(reader), GetGroupResponse.GroupInfo));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetGroupResponse {
        return GetGroupResponse.deserialize(bytes);
    }
}
export namespace GetGroupResponse {
    export class GroupInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            group?: dependency_1.Group;
            submits?: dependency_1.Submit[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group" in data && data.group != undefined) {
                    this.group = data.group;
                }
                if ("submits" in data && data.submits != undefined) {
                    this.submits = data.submits;
                }
            }
        }
        get group() {
            return pb_1.Message.getWrapperField(this, dependency_1.Group, 1) as dependency_1.Group;
        }
        set group(value: dependency_1.Group) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_group() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get submits() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.Submit, 2) as dependency_1.Submit[];
        }
        set submits(value: dependency_1.Submit[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            group?: ReturnType<typeof dependency_1.Group.prototype.toObject>;
            submits?: ReturnType<typeof dependency_1.Submit.prototype.toObject>[];
        }): GroupInfo {
            const message = new GroupInfo({});
            if (data.group != null) {
                message.group = dependency_1.Group.fromObject(data.group);
            }
            if (data.submits != null) {
                message.submits = data.submits.map(item => dependency_1.Submit.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                group?: ReturnType<typeof dependency_1.Group.prototype.toObject>;
                submits?: ReturnType<typeof dependency_1.Submit.prototype.toObject>[];
            } = {};
            if (this.group != null) {
                data.group = this.group.toObject();
            }
            if (this.submits != null) {
                data.submits = this.submits.map((item: dependency_1.Submit) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_group)
                writer.writeMessage(1, this.group, () => this.group.serialize(writer));
            if (this.submits.length)
                writer.writeRepeatedMessage(2, this.submits, (item: dependency_1.Submit) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GroupInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GroupInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.group, () => message.group = dependency_1.Group.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.submits, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_1.Submit.deserialize(reader), dependency_1.Submit));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GroupInfo {
            return GroupInfo.deserialize(bytes);
        }
    }
}
