/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.12
 * source: backend/messages.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./resources";
import * as pb_1 from "google-protobuf";
export class GetRankingRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        year?: number;
        contain_guest?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("year" in data && data.year != undefined) {
                this.year = data.year;
            }
            if ("contain_guest" in data && data.contain_guest != undefined) {
                this.contain_guest = data.contain_guest;
            }
        }
    }
    get year() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set year(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get contain_guest() {
        return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
    }
    set contain_guest(value: boolean) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        year?: number;
        contain_guest?: boolean;
    }): GetRankingRequest {
        const message = new GetRankingRequest({});
        if (data.year != null) {
            message.year = data.year;
        }
        if (data.contain_guest != null) {
            message.contain_guest = data.contain_guest;
        }
        return message;
    }
    toObject() {
        const data: {
            year?: number;
            contain_guest?: boolean;
        } = {};
        if (this.year != null) {
            data.year = this.year;
        }
        if (this.contain_guest != null) {
            data.contain_guest = this.contain_guest;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.year != 0)
            writer.writeInt32(1, this.year);
        if (this.contain_guest != false)
            writer.writeBool(2, this.contain_guest);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetRankingRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetRankingRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.year = reader.readInt32();
                    break;
                case 2:
                    message.contain_guest = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetRankingRequest {
        return GetRankingRequest.deserialize(bytes);
    }
}
export class GetRankingResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        records?: GetRankingResponse.Record[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("records" in data && data.records != undefined) {
                this.records = data.records;
            }
        }
    }
    get records() {
        return pb_1.Message.getRepeatedWrapperField(this, GetRankingResponse.Record, 1) as GetRankingResponse.Record[];
    }
    set records(value: GetRankingResponse.Record[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        records?: ReturnType<typeof GetRankingResponse.Record.prototype.toObject>[];
    }): GetRankingResponse {
        const message = new GetRankingResponse({});
        if (data.records != null) {
            message.records = data.records.map(item => GetRankingResponse.Record.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            records?: ReturnType<typeof GetRankingResponse.Record.prototype.toObject>[];
        } = {};
        if (this.records != null) {
            data.records = this.records.map((item: GetRankingResponse.Record) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.records.length)
            writer.writeRepeatedMessage(1, this.records, (item: GetRankingResponse.Record) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetRankingResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetRankingResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.records, () => pb_1.Message.addToRepeatedWrapperField(message, 1, GetRankingResponse.Record.deserialize(reader), GetRankingResponse.Record));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetRankingResponse {
        return GetRankingResponse.deserialize(bytes);
    }
}
export namespace GetRankingResponse {
    export class Record extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            rank?: number;
            group?: dependency_1.Group;
            score?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rank" in data && data.rank != undefined) {
                    this.rank = data.rank;
                }
                if ("group" in data && data.group != undefined) {
                    this.group = data.group;
                }
                if ("score" in data && data.score != undefined) {
                    this.score = data.score;
                }
            }
        }
        get rank() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set rank(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get group() {
            return pb_1.Message.getWrapperField(this, dependency_1.Group, 2) as dependency_1.Group;
        }
        set group(value: dependency_1.Group) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_group() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get score() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set score(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            rank?: number;
            group?: ReturnType<typeof dependency_1.Group.prototype.toObject>;
            score?: number;
        }): Record {
            const message = new Record({});
            if (data.rank != null) {
                message.rank = data.rank;
            }
            if (data.group != null) {
                message.group = dependency_1.Group.fromObject(data.group);
            }
            if (data.score != null) {
                message.score = data.score;
            }
            return message;
        }
        toObject() {
            const data: {
                rank?: number;
                group?: ReturnType<typeof dependency_1.Group.prototype.toObject>;
                score?: number;
            } = {};
            if (this.rank != null) {
                data.rank = this.rank;
            }
            if (this.group != null) {
                data.group = this.group.toObject();
            }
            if (this.score != null) {
                data.score = this.score;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.rank != 0)
                writer.writeInt32(1, this.rank);
            if (this.has_group)
                writer.writeMessage(2, this.group, () => this.group.serialize(writer));
            if (this.score != 0)
                writer.writeInt32(3, this.score);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Record {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Record();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.rank = reader.readInt32();
                        break;
                    case 2:
                        reader.readMessage(message.group, () => message.group = dependency_1.Group.deserialize(reader));
                        break;
                    case 3:
                        message.score = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Record {
            return Record.deserialize(bytes);
        }
    }
}
export class GetGroupRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        group_id?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("group_id" in data && data.group_id != undefined) {
                this.group_id = data.group_id;
            }
        }
    }
    get group_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set group_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        group_id?: string;
    }): GetGroupRequest {
        const message = new GetGroupRequest({});
        if (data.group_id != null) {
            message.group_id = data.group_id;
        }
        return message;
    }
    toObject() {
        const data: {
            group_id?: string;
        } = {};
        if (this.group_id != null) {
            data.group_id = this.group_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.group_id.length)
            writer.writeString(1, this.group_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetGroupRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetGroupRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.group_id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetGroupRequest {
        return GetGroupRequest.deserialize(bytes);
    }
}
export class GetGroupResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        groups?: GetGroupResponse.GroupInfo[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("groups" in data && data.groups != undefined) {
                this.groups = data.groups;
            }
        }
    }
    get groups() {
        return pb_1.Message.getRepeatedWrapperField(this, GetGroupResponse.GroupInfo, 1) as GetGroupResponse.GroupInfo[];
    }
    set groups(value: GetGroupResponse.GroupInfo[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        groups?: ReturnType<typeof GetGroupResponse.GroupInfo.prototype.toObject>[];
    }): GetGroupResponse {
        const message = new GetGroupResponse({});
        if (data.groups != null) {
            message.groups = data.groups.map(item => GetGroupResponse.GroupInfo.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            groups?: ReturnType<typeof GetGroupResponse.GroupInfo.prototype.toObject>[];
        } = {};
        if (this.groups != null) {
            data.groups = this.groups.map((item: GetGroupResponse.GroupInfo) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.groups.length)
            writer.writeRepeatedMessage(1, this.groups, (item: GetGroupResponse.GroupInfo) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetGroupResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetGroupResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.groups, () => pb_1.Message.addToRepeatedWrapperField(message, 1, GetGroupResponse.GroupInfo.deserialize(reader), GetGroupResponse.GroupInfo));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetGroupResponse {
        return GetGroupResponse.deserialize(bytes);
    }
}
export namespace GetGroupResponse {
    export class GroupInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            group?: dependency_1.Group;
            score_histories?: dependency_1.ScoreHistory[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group" in data && data.group != undefined) {
                    this.group = data.group;
                }
                if ("score_histories" in data && data.score_histories != undefined) {
                    this.score_histories = data.score_histories;
                }
            }
        }
        get group() {
            return pb_1.Message.getWrapperField(this, dependency_1.Group, 1) as dependency_1.Group;
        }
        set group(value: dependency_1.Group) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_group() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get score_histories() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.ScoreHistory, 2) as dependency_1.ScoreHistory[];
        }
        set score_histories(value: dependency_1.ScoreHistory[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            group?: ReturnType<typeof dependency_1.Group.prototype.toObject>;
            score_histories?: ReturnType<typeof dependency_1.ScoreHistory.prototype.toObject>[];
        }): GroupInfo {
            const message = new GroupInfo({});
            if (data.group != null) {
                message.group = dependency_1.Group.fromObject(data.group);
            }
            if (data.score_histories != null) {
                message.score_histories = data.score_histories.map(item => dependency_1.ScoreHistory.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                group?: ReturnType<typeof dependency_1.Group.prototype.toObject>;
                score_histories?: ReturnType<typeof dependency_1.ScoreHistory.prototype.toObject>[];
            } = {};
            if (this.group != null) {
                data.group = this.group.toObject();
            }
            if (this.score_histories != null) {
                data.score_histories = this.score_histories.map((item: dependency_1.ScoreHistory) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_group)
                writer.writeMessage(1, this.group, () => this.group.serialize(writer));
            if (this.score_histories.length)
                writer.writeRepeatedMessage(2, this.score_histories, (item: dependency_1.ScoreHistory) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GroupInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GroupInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.group, () => message.group = dependency_1.Group.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.score_histories, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_1.ScoreHistory.deserialize(reader), dependency_1.ScoreHistory));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GroupInfo {
            return GroupInfo.deserialize(bytes);
        }
    }
}
