/**
 * @fileoverview gRPC-Web generated client stub for 
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.21.12
// source: backend/services.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as backend_messages_pb from '../backend/messages_pb';


export class BackendServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorGetRanking = new grpcWeb.MethodDescriptor(
    '/BackendService/GetRanking',
    grpcWeb.MethodType.UNARY,
    backend_messages_pb.GetRankingRequest,
    backend_messages_pb.GetRankingResponse,
    (request: backend_messages_pb.GetRankingRequest) => {
      return request.serializeBinary();
    },
    backend_messages_pb.GetRankingResponse.deserializeBinary
  );

  getRanking(
    request: backend_messages_pb.GetRankingRequest,
    metadata: grpcWeb.Metadata | null): Promise<backend_messages_pb.GetRankingResponse>;

  getRanking(
    request: backend_messages_pb.GetRankingRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: backend_messages_pb.GetRankingResponse) => void): grpcWeb.ClientReadableStream<backend_messages_pb.GetRankingResponse>;

  getRanking(
    request: backend_messages_pb.GetRankingRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: backend_messages_pb.GetRankingResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/BackendService/GetRanking',
        request,
        metadata || {},
        this.methodDescriptorGetRanking,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/BackendService/GetRanking',
    request,
    metadata || {},
    this.methodDescriptorGetRanking);
  }

  methodDescriptorPostSubmit = new grpcWeb.MethodDescriptor(
    '/BackendService/PostSubmit',
    grpcWeb.MethodType.UNARY,
    backend_messages_pb.PostSubmitRequest,
    backend_messages_pb.PostSubmitResponse,
    (request: backend_messages_pb.PostSubmitRequest) => {
      return request.serializeBinary();
    },
    backend_messages_pb.PostSubmitResponse.deserializeBinary
  );

  postSubmit(
    request: backend_messages_pb.PostSubmitRequest,
    metadata: grpcWeb.Metadata | null): Promise<backend_messages_pb.PostSubmitResponse>;

  postSubmit(
    request: backend_messages_pb.PostSubmitRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: backend_messages_pb.PostSubmitResponse) => void): grpcWeb.ClientReadableStream<backend_messages_pb.PostSubmitResponse>;

  postSubmit(
    request: backend_messages_pb.PostSubmitRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: backend_messages_pb.PostSubmitResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/BackendService/PostSubmit',
        request,
        metadata || {},
        this.methodDescriptorPostSubmit,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/BackendService/PostSubmit',
    request,
    metadata || {},
    this.methodDescriptorPostSubmit);
  }

  methodDescriptorGetSubmit = new grpcWeb.MethodDescriptor(
    '/BackendService/GetSubmit',
    grpcWeb.MethodType.SERVER_STREAMING,
    backend_messages_pb.GetSubmitRequest,
    backend_messages_pb.GetSubmitResponse,
    (request: backend_messages_pb.GetSubmitRequest) => {
      return request.serializeBinary();
    },
    backend_messages_pb.GetSubmitResponse.deserializeBinary
  );

  getSubmit(
    request: backend_messages_pb.GetSubmitRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<backend_messages_pb.GetSubmitResponse> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/BackendService/GetSubmit',
      request,
      metadata || {},
      this.methodDescriptorGetSubmit);
  }

  methodDescriptorPostLogin = new grpcWeb.MethodDescriptor(
    '/BackendService/PostLogin',
    grpcWeb.MethodType.UNARY,
    backend_messages_pb.PostLoginRequest,
    backend_messages_pb.PostLoginResponse,
    (request: backend_messages_pb.PostLoginRequest) => {
      return request.serializeBinary();
    },
    backend_messages_pb.PostLoginResponse.deserializeBinary
  );

  postLogin(
    request: backend_messages_pb.PostLoginRequest,
    metadata: grpcWeb.Metadata | null): Promise<backend_messages_pb.PostLoginResponse>;

  postLogin(
    request: backend_messages_pb.PostLoginRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: backend_messages_pb.PostLoginResponse) => void): grpcWeb.ClientReadableStream<backend_messages_pb.PostLoginResponse>;

  postLogin(
    request: backend_messages_pb.PostLoginRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: backend_messages_pb.PostLoginResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/BackendService/PostLogin',
        request,
        metadata || {},
        this.methodDescriptorPostLogin,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/BackendService/PostLogin',
    request,
    metadata || {},
    this.methodDescriptorPostLogin);
  }

}

export class HealthcheckServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorPing = new grpcWeb.MethodDescriptor(
    '/HealthcheckService/Ping',
    grpcWeb.MethodType.UNARY,
    backend_messages_pb.PingRequest,
    backend_messages_pb.PingResponse,
    (request: backend_messages_pb.PingRequest) => {
      return request.serializeBinary();
    },
    backend_messages_pb.PingResponse.deserializeBinary
  );

  ping(
    request: backend_messages_pb.PingRequest,
    metadata: grpcWeb.Metadata | null): Promise<backend_messages_pb.PingResponse>;

  ping(
    request: backend_messages_pb.PingRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: backend_messages_pb.PingResponse) => void): grpcWeb.ClientReadableStream<backend_messages_pb.PingResponse>;

  ping(
    request: backend_messages_pb.PingRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: backend_messages_pb.PingResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/HealthcheckService/Ping',
        request,
        metadata || {},
        this.methodDescriptorPing,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/HealthcheckService/Ping',
    request,
    metadata || {},
    this.methodDescriptorPing);
  }

}

