// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "services/backend/messages.proto" (package "backend", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Role } from "./resources";
import { Contest } from "./resources";
import { Validator } from "./resources";
import { TagSelectionLogicManual } from "./resources";
import { TagSelectionLogicAuto } from "./resources";
import { Status } from "./resources";
import { Submit } from "./resources";
import { Timestamp } from "../../google/protobuf/timestamp";
import { Group } from "./resources";
/**
 * @generated from protobuf message backend.PostLoginRequest
 */
export interface PostLoginRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string; // it means group_id
    /**
     * @generated from protobuf field: string password = 2;
     */
    password: string;
}
/**
 * @generated from protobuf message backend.PostLoginResponse
 */
export interface PostLoginResponse {
    /**
     * @generated from protobuf field: backend.Group group = 1;
     */
    group?: Group;
    /**
     * @generated from protobuf field: string token = 2;
     */
    token: string;
}
/**
 * @generated from protobuf message backend.PostSubmitRequest
 */
export interface PostSubmitRequest {
    /**
     * @generated from protobuf field: string url = 1;
     */
    url: string;
    /**
     * @generated from protobuf field: string contest_slug = 2;
     */
    contestSlug: string;
}
/**
 * @generated from protobuf message backend.PostSubmitResponse
 */
export interface PostSubmitResponse {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: string url = 2;
     */
    url: string;
    /**
     * @generated from protobuf field: string contest_slug = 3;
     */
    contestSlug: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp submited_at = 4;
     */
    submitedAt?: Timestamp;
}
/**
 * @generated from protobuf message backend.GetSubmitRequest
 */
export interface GetSubmitRequest {
    /**
     * @generated from protobuf field: int32 submit_id = 1;
     */
    submitId: number;
}
/**
 * @generated from protobuf message backend.GetSubmitResponse
 */
export interface GetSubmitResponse {
    /**
     * @generated from protobuf field: backend.Submit submit = 1;
     */
    submit?: Submit;
}
/**
 * @generated from protobuf message backend.ListSubmitsRequest
 */
export interface ListSubmitsRequest {
    /**
     * @generated from protobuf field: string contest_slug = 1;
     */
    contestSlug: string;
    /**
     * @generated from protobuf field: int32 page = 2;
     */
    page: number; // 100 entries per 1 page
    /**
     * @generated from protobuf field: optional backend.ListSubmitsRequest.SortBy sort_by = 3;
     */
    sortBy?: ListSubmitsRequest_SortBy; // default: submited_at
    /**
     * @generated from protobuf field: optional bool is_desc = 4;
     */
    isDesc?: boolean; // default: true
    /**
     * @generated from protobuf field: optional string group_name = 5;
     */
    groupName?: string; // middle match
    /**
     * @generated from protobuf field: optional backend.Status status = 6;
     */
    status?: Status;
    /**
     * @generated from protobuf field: optional bool contains_guest = 7;
     */
    containsGuest?: boolean; // default: false
}
/**
 * @generated from protobuf enum backend.ListSubmitsRequest.SortBy
 */
export enum ListSubmitsRequest_SortBy {
    /**
     * @generated from protobuf enum value: SUBMITED_AT = 0;
     */
    SUBMITED_AT = 0,
    /**
     * @generated from protobuf enum value: SCORE = 1;
     */
    SCORE = 1
}
/**
 * @generated from protobuf message backend.ListSubmitsResponse
 */
export interface ListSubmitsResponse {
    /**
     * @generated from protobuf field: int32 page = 1;
     */
    page: number;
    /**
     * @generated from protobuf field: int32 total_pages = 2;
     */
    totalPages: number;
    /**
     * @generated from protobuf field: repeated backend.Submit submits = 3;
     */
    submits: Submit[]; // NOTE: task_results will be empty
}
/**
 * @generated from protobuf message backend.CreateContestRequest
 */
export interface CreateContestRequest {
    /**
     * @generated from protobuf field: string title = 2;
     */
    title: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp start_at = 4;
     */
    startAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp end_at = 5;
     */
    endAt?: Timestamp;
    /**
     * @generated from protobuf field: int32 submit_limit = 6;
     */
    submitLimit: number;
    /**
     * @generated from protobuf field: string slug = 8;
     */
    slug: string;
    /**
     * @generated from protobuf oneof: tag_selection
     */
    tagSelection: {
        oneofKind: "auto";
        /**
         * @generated from protobuf field: backend.TagSelectionLogicAuto auto = 9;
         */
        auto: TagSelectionLogicAuto;
    } | {
        oneofKind: "manual";
        /**
         * @generated from protobuf field: backend.TagSelectionLogicManual manual = 10;
         */
        manual: TagSelectionLogicManual;
    } | {
        oneofKind: undefined;
    };
    /**
     * @generated from protobuf field: backend.Validator validator = 11;
     */
    validator: Validator;
    /**
     * @generated from protobuf field: int32 time_limit_per_task = 12;
     */
    timeLimitPerTask: number; // sec
}
/**
 * @generated from protobuf message backend.CreateContestResponse
 */
export interface CreateContestResponse {
    /**
     * @generated from protobuf field: backend.Contest contest = 1;
     */
    contest?: Contest;
}
/**
 * @generated from protobuf message backend.GetContestRequest
 */
export interface GetContestRequest {
    /**
     * @generated from protobuf field: string contest_slug = 1;
     */
    contestSlug: string;
}
/**
 * @generated from protobuf message backend.GetContestResponse
 */
export interface GetContestResponse {
    /**
     * @generated from protobuf field: backend.Contest contest = 1;
     */
    contest?: Contest;
}
/**
 * NOTE: cannot change slug and tag selection logic
 *
 * @generated from protobuf message backend.UpdateContestRequest
 */
export interface UpdateContestRequest {
    /**
     * @generated from protobuf field: string contest_slug = 1;
     */
    contestSlug: string;
    /**
     * @generated from protobuf field: optional string title = 2;
     */
    title?: string;
    /**
     * @generated from protobuf field: optional google.protobuf.Timestamp start_at = 4;
     */
    startAt?: Timestamp;
    /**
     * @generated from protobuf field: optional google.protobuf.Timestamp end_at = 5;
     */
    endAt?: Timestamp;
    /**
     * @generated from protobuf field: optional int32 submit_limit = 6;
     */
    submitLimit?: number;
    /**
     * @generated from protobuf field: optional backend.Validator validator = 9;
     */
    validator?: Validator;
}
/**
 * @generated from protobuf message backend.UpdateContestResponse
 */
export interface UpdateContestResponse {
    /**
     * @generated from protobuf field: backend.Contest contest = 1;
     */
    contest?: Contest;
}
/**
 * @generated from protobuf message backend.GetRankingRequest
 */
export interface GetRankingRequest {
    /**
     * @generated from protobuf field: string contest_slug = 1;
     */
    contestSlug: string;
    /**
     * @generated from protobuf field: bool contain_guest = 2;
     */
    containGuest: boolean; // if it is true, return ranking which includes guests
}
/**
 * @generated from protobuf message backend.GetRankingResponse
 */
export interface GetRankingResponse {
    /**
     * @generated from protobuf field: repeated backend.GetRankingResponse.Record records = 1;
     */
    records: GetRankingResponse_Record[];
}
/**
 * @generated from protobuf message backend.GetRankingResponse.Record
 */
export interface GetRankingResponse_Record {
    /**
     * @generated from protobuf field: int32 rank = 1;
     */
    rank: number;
    /**
     * @generated from protobuf field: backend.Group group = 2;
     */
    group?: Group;
    /**
     * @generated from protobuf field: optional int32 score = 3;
     */
    score?: number;
}
/**
 * @generated from protobuf message backend.PingUnaryRequest
 */
export interface PingUnaryRequest {
    /**
     * @generated from protobuf field: string ping = 1;
     */
    ping: string;
}
/**
 * @generated from protobuf message backend.PingUnaryResponse
 */
export interface PingUnaryResponse {
    /**
     * @generated from protobuf field: string pong = 1;
     */
    pong: string;
}
/**
 * @generated from protobuf message backend.PingServerSideStreamingRequest
 */
export interface PingServerSideStreamingRequest {
    /**
     * @generated from protobuf field: string ping = 2;
     */
    ping: string;
}
/**
 * @generated from protobuf message backend.PingServerSideStreamingResponse
 */
export interface PingServerSideStreamingResponse {
    /**
     * @generated from protobuf field: string pong = 2;
     */
    pong: string;
}
/**
 * @generated from protobuf message backend.ListContestsRequest
 */
export interface ListContestsRequest {
}
/**
 * @generated from protobuf message backend.ListContestsResponse
 */
export interface ListContestsResponse {
    /**
     * @generated from protobuf field: repeated backend.Contest contests = 2;
     */
    contests: Contest[];
}
/**
 * @generated from protobuf message backend.VerifyTokenRequest
 */
export interface VerifyTokenRequest {
}
/**
 * @generated from protobuf message backend.VerifyTokenResponse
 */
export interface VerifyTokenResponse {
    /**
     * @generated from protobuf field: bool ok = 1;
     */
    ok: boolean;
    /**
     * @generated from protobuf field: string message = 2;
     */
    message: string;
}
/**
 * @generated from protobuf message backend.GetContestantInfoRequest
 */
export interface GetContestantInfoRequest {
    /**
     * @generated from protobuf field: string contest_slug = 1;
     */
    contestSlug: string;
}
/**
 * @generated from protobuf message backend.GetContestantInfoResponse
 */
export interface GetContestantInfoResponse {
    /**
     * @generated from protobuf field: optional backend.Submit latest_submit = 1;
     */
    latestSubmit?: Submit;
    /**
     * @generated from protobuf field: int32 remaining_submit_count = 2;
     */
    remainingSubmitCount: number;
}
/**
 * @generated from protobuf message backend.CreateGroupsRequest
 */
export interface CreateGroupsRequest {
    /**
     * @generated from protobuf field: repeated backend.CreateGroupsRequest.CreateGroupsGroup groups = 1;
     */
    groups: CreateGroupsRequest_CreateGroupsGroup[];
}
/**
 * @generated from protobuf message backend.CreateGroupsRequest.CreateGroupsGroup
 */
export interface CreateGroupsRequest_CreateGroupsGroup {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string password = 2;
     */
    password: string;
    /**
     * @generated from protobuf field: int32 year = 3;
     */
    year: number;
    /**
     * @generated from protobuf field: backend.Role role = 4;
     */
    role: Role;
}
/**
 * @generated from protobuf message backend.CreateGroupsResponse
 */
export interface CreateGroupsResponse {
    /**
     * @generated from protobuf field: repeated backend.Group groups = 1;
     */
    groups: Group[];
}
// @generated message type with reflection information, may provide speed optimized methods
class PostLoginRequest$Type extends MessageType<PostLoginRequest> {
    constructor() {
        super("backend.PostLoginRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PostLoginRequest>): PostLoginRequest {
        const message = { id: "", password: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PostLoginRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PostLoginRequest): PostLoginRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string password */ 2:
                    message.password = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PostLoginRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string password = 2; */
        if (message.password !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.password);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.PostLoginRequest
 */
export const PostLoginRequest = new PostLoginRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PostLoginResponse$Type extends MessageType<PostLoginResponse> {
    constructor() {
        super("backend.PostLoginResponse", [
            { no: 1, name: "group", kind: "message", T: () => Group },
            { no: 2, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PostLoginResponse>): PostLoginResponse {
        const message = { token: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PostLoginResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PostLoginResponse): PostLoginResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* backend.Group group */ 1:
                    message.group = Group.internalBinaryRead(reader, reader.uint32(), options, message.group);
                    break;
                case /* string token */ 2:
                    message.token = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PostLoginResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* backend.Group group = 1; */
        if (message.group)
            Group.internalBinaryWrite(message.group, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string token = 2; */
        if (message.token !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.token);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.PostLoginResponse
 */
export const PostLoginResponse = new PostLoginResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PostSubmitRequest$Type extends MessageType<PostSubmitRequest> {
    constructor() {
        super("backend.PostSubmitRequest", [
            { no: 1, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "contest_slug", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PostSubmitRequest>): PostSubmitRequest {
        const message = { url: "", contestSlug: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PostSubmitRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PostSubmitRequest): PostSubmitRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string url */ 1:
                    message.url = reader.string();
                    break;
                case /* string contest_slug */ 2:
                    message.contestSlug = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PostSubmitRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string url = 1; */
        if (message.url !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.url);
        /* string contest_slug = 2; */
        if (message.contestSlug !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.contestSlug);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.PostSubmitRequest
 */
export const PostSubmitRequest = new PostSubmitRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PostSubmitResponse$Type extends MessageType<PostSubmitResponse> {
    constructor() {
        super("backend.PostSubmitResponse", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "contest_slug", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "submited_at", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<PostSubmitResponse>): PostSubmitResponse {
        const message = { id: 0, url: "", contestSlug: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PostSubmitResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PostSubmitResponse): PostSubmitResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* string url */ 2:
                    message.url = reader.string();
                    break;
                case /* string contest_slug */ 3:
                    message.contestSlug = reader.string();
                    break;
                case /* google.protobuf.Timestamp submited_at */ 4:
                    message.submitedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.submitedAt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PostSubmitResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* string url = 2; */
        if (message.url !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.url);
        /* string contest_slug = 3; */
        if (message.contestSlug !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.contestSlug);
        /* google.protobuf.Timestamp submited_at = 4; */
        if (message.submitedAt)
            Timestamp.internalBinaryWrite(message.submitedAt, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.PostSubmitResponse
 */
export const PostSubmitResponse = new PostSubmitResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetSubmitRequest$Type extends MessageType<GetSubmitRequest> {
    constructor() {
        super("backend.GetSubmitRequest", [
            { no: 1, name: "submit_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetSubmitRequest>): GetSubmitRequest {
        const message = { submitId: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetSubmitRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetSubmitRequest): GetSubmitRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 submit_id */ 1:
                    message.submitId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetSubmitRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 submit_id = 1; */
        if (message.submitId !== 0)
            writer.tag(1, WireType.Varint).int32(message.submitId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.GetSubmitRequest
 */
export const GetSubmitRequest = new GetSubmitRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetSubmitResponse$Type extends MessageType<GetSubmitResponse> {
    constructor() {
        super("backend.GetSubmitResponse", [
            { no: 1, name: "submit", kind: "message", T: () => Submit }
        ]);
    }
    create(value?: PartialMessage<GetSubmitResponse>): GetSubmitResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetSubmitResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetSubmitResponse): GetSubmitResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* backend.Submit submit */ 1:
                    message.submit = Submit.internalBinaryRead(reader, reader.uint32(), options, message.submit);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetSubmitResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* backend.Submit submit = 1; */
        if (message.submit)
            Submit.internalBinaryWrite(message.submit, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.GetSubmitResponse
 */
export const GetSubmitResponse = new GetSubmitResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListSubmitsRequest$Type extends MessageType<ListSubmitsRequest> {
    constructor() {
        super("backend.ListSubmitsRequest", [
            { no: 1, name: "contest_slug", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "page", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "sort_by", kind: "enum", opt: true, T: () => ["backend.ListSubmitsRequest.SortBy", ListSubmitsRequest_SortBy] },
            { no: 4, name: "is_desc", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "group_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "status", kind: "enum", opt: true, T: () => ["backend.Status", Status] },
            { no: 7, name: "contains_guest", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ListSubmitsRequest>): ListSubmitsRequest {
        const message = { contestSlug: "", page: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListSubmitsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListSubmitsRequest): ListSubmitsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string contest_slug */ 1:
                    message.contestSlug = reader.string();
                    break;
                case /* int32 page */ 2:
                    message.page = reader.int32();
                    break;
                case /* optional backend.ListSubmitsRequest.SortBy sort_by */ 3:
                    message.sortBy = reader.int32();
                    break;
                case /* optional bool is_desc */ 4:
                    message.isDesc = reader.bool();
                    break;
                case /* optional string group_name */ 5:
                    message.groupName = reader.string();
                    break;
                case /* optional backend.Status status */ 6:
                    message.status = reader.int32();
                    break;
                case /* optional bool contains_guest */ 7:
                    message.containsGuest = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListSubmitsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string contest_slug = 1; */
        if (message.contestSlug !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.contestSlug);
        /* int32 page = 2; */
        if (message.page !== 0)
            writer.tag(2, WireType.Varint).int32(message.page);
        /* optional backend.ListSubmitsRequest.SortBy sort_by = 3; */
        if (message.sortBy !== undefined)
            writer.tag(3, WireType.Varint).int32(message.sortBy);
        /* optional bool is_desc = 4; */
        if (message.isDesc !== undefined)
            writer.tag(4, WireType.Varint).bool(message.isDesc);
        /* optional string group_name = 5; */
        if (message.groupName !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.groupName);
        /* optional backend.Status status = 6; */
        if (message.status !== undefined)
            writer.tag(6, WireType.Varint).int32(message.status);
        /* optional bool contains_guest = 7; */
        if (message.containsGuest !== undefined)
            writer.tag(7, WireType.Varint).bool(message.containsGuest);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.ListSubmitsRequest
 */
export const ListSubmitsRequest = new ListSubmitsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListSubmitsResponse$Type extends MessageType<ListSubmitsResponse> {
    constructor() {
        super("backend.ListSubmitsResponse", [
            { no: 1, name: "page", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "total_pages", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "submits", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Submit }
        ]);
    }
    create(value?: PartialMessage<ListSubmitsResponse>): ListSubmitsResponse {
        const message = { page: 0, totalPages: 0, submits: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListSubmitsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListSubmitsResponse): ListSubmitsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 page */ 1:
                    message.page = reader.int32();
                    break;
                case /* int32 total_pages */ 2:
                    message.totalPages = reader.int32();
                    break;
                case /* repeated backend.Submit submits */ 3:
                    message.submits.push(Submit.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListSubmitsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 page = 1; */
        if (message.page !== 0)
            writer.tag(1, WireType.Varint).int32(message.page);
        /* int32 total_pages = 2; */
        if (message.totalPages !== 0)
            writer.tag(2, WireType.Varint).int32(message.totalPages);
        /* repeated backend.Submit submits = 3; */
        for (let i = 0; i < message.submits.length; i++)
            Submit.internalBinaryWrite(message.submits[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.ListSubmitsResponse
 */
export const ListSubmitsResponse = new ListSubmitsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateContestRequest$Type extends MessageType<CreateContestRequest> {
    constructor() {
        super("backend.CreateContestRequest", [
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "start_at", kind: "message", T: () => Timestamp },
            { no: 5, name: "end_at", kind: "message", T: () => Timestamp },
            { no: 6, name: "submit_limit", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "slug", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "auto", kind: "message", oneof: "tagSelection", T: () => TagSelectionLogicAuto },
            { no: 10, name: "manual", kind: "message", oneof: "tagSelection", T: () => TagSelectionLogicManual },
            { no: 11, name: "validator", kind: "enum", T: () => ["backend.Validator", Validator] },
            { no: 12, name: "time_limit_per_task", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CreateContestRequest>): CreateContestRequest {
        const message = { title: "", submitLimit: 0, slug: "", tagSelection: { oneofKind: undefined }, validator: 0, timeLimitPerTask: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateContestRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateContestRequest): CreateContestRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* google.protobuf.Timestamp start_at */ 4:
                    message.startAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.startAt);
                    break;
                case /* google.protobuf.Timestamp end_at */ 5:
                    message.endAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.endAt);
                    break;
                case /* int32 submit_limit */ 6:
                    message.submitLimit = reader.int32();
                    break;
                case /* string slug */ 8:
                    message.slug = reader.string();
                    break;
                case /* backend.TagSelectionLogicAuto auto */ 9:
                    message.tagSelection = {
                        oneofKind: "auto",
                        auto: TagSelectionLogicAuto.internalBinaryRead(reader, reader.uint32(), options, (message.tagSelection as any).auto)
                    };
                    break;
                case /* backend.TagSelectionLogicManual manual */ 10:
                    message.tagSelection = {
                        oneofKind: "manual",
                        manual: TagSelectionLogicManual.internalBinaryRead(reader, reader.uint32(), options, (message.tagSelection as any).manual)
                    };
                    break;
                case /* backend.Validator validator */ 11:
                    message.validator = reader.int32();
                    break;
                case /* int32 time_limit_per_task */ 12:
                    message.timeLimitPerTask = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateContestRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* google.protobuf.Timestamp start_at = 4; */
        if (message.startAt)
            Timestamp.internalBinaryWrite(message.startAt, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp end_at = 5; */
        if (message.endAt)
            Timestamp.internalBinaryWrite(message.endAt, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* int32 submit_limit = 6; */
        if (message.submitLimit !== 0)
            writer.tag(6, WireType.Varint).int32(message.submitLimit);
        /* string slug = 8; */
        if (message.slug !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.slug);
        /* backend.TagSelectionLogicAuto auto = 9; */
        if (message.tagSelection.oneofKind === "auto")
            TagSelectionLogicAuto.internalBinaryWrite(message.tagSelection.auto, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* backend.TagSelectionLogicManual manual = 10; */
        if (message.tagSelection.oneofKind === "manual")
            TagSelectionLogicManual.internalBinaryWrite(message.tagSelection.manual, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* backend.Validator validator = 11; */
        if (message.validator !== 0)
            writer.tag(11, WireType.Varint).int32(message.validator);
        /* int32 time_limit_per_task = 12; */
        if (message.timeLimitPerTask !== 0)
            writer.tag(12, WireType.Varint).int32(message.timeLimitPerTask);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.CreateContestRequest
 */
export const CreateContestRequest = new CreateContestRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateContestResponse$Type extends MessageType<CreateContestResponse> {
    constructor() {
        super("backend.CreateContestResponse", [
            { no: 1, name: "contest", kind: "message", T: () => Contest }
        ]);
    }
    create(value?: PartialMessage<CreateContestResponse>): CreateContestResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateContestResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateContestResponse): CreateContestResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* backend.Contest contest */ 1:
                    message.contest = Contest.internalBinaryRead(reader, reader.uint32(), options, message.contest);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateContestResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* backend.Contest contest = 1; */
        if (message.contest)
            Contest.internalBinaryWrite(message.contest, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.CreateContestResponse
 */
export const CreateContestResponse = new CreateContestResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetContestRequest$Type extends MessageType<GetContestRequest> {
    constructor() {
        super("backend.GetContestRequest", [
            { no: 1, name: "contest_slug", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetContestRequest>): GetContestRequest {
        const message = { contestSlug: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetContestRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetContestRequest): GetContestRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string contest_slug */ 1:
                    message.contestSlug = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetContestRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string contest_slug = 1; */
        if (message.contestSlug !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.contestSlug);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.GetContestRequest
 */
export const GetContestRequest = new GetContestRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetContestResponse$Type extends MessageType<GetContestResponse> {
    constructor() {
        super("backend.GetContestResponse", [
            { no: 1, name: "contest", kind: "message", T: () => Contest }
        ]);
    }
    create(value?: PartialMessage<GetContestResponse>): GetContestResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetContestResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetContestResponse): GetContestResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* backend.Contest contest */ 1:
                    message.contest = Contest.internalBinaryRead(reader, reader.uint32(), options, message.contest);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetContestResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* backend.Contest contest = 1; */
        if (message.contest)
            Contest.internalBinaryWrite(message.contest, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.GetContestResponse
 */
export const GetContestResponse = new GetContestResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateContestRequest$Type extends MessageType<UpdateContestRequest> {
    constructor() {
        super("backend.UpdateContestRequest", [
            { no: 1, name: "contest_slug", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "title", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "start_at", kind: "message", T: () => Timestamp },
            { no: 5, name: "end_at", kind: "message", T: () => Timestamp },
            { no: 6, name: "submit_limit", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "validator", kind: "enum", opt: true, T: () => ["backend.Validator", Validator] }
        ]);
    }
    create(value?: PartialMessage<UpdateContestRequest>): UpdateContestRequest {
        const message = { contestSlug: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateContestRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateContestRequest): UpdateContestRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string contest_slug */ 1:
                    message.contestSlug = reader.string();
                    break;
                case /* optional string title */ 2:
                    message.title = reader.string();
                    break;
                case /* optional google.protobuf.Timestamp start_at */ 4:
                    message.startAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.startAt);
                    break;
                case /* optional google.protobuf.Timestamp end_at */ 5:
                    message.endAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.endAt);
                    break;
                case /* optional int32 submit_limit */ 6:
                    message.submitLimit = reader.int32();
                    break;
                case /* optional backend.Validator validator */ 9:
                    message.validator = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateContestRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string contest_slug = 1; */
        if (message.contestSlug !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.contestSlug);
        /* optional string title = 2; */
        if (message.title !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* optional google.protobuf.Timestamp start_at = 4; */
        if (message.startAt)
            Timestamp.internalBinaryWrite(message.startAt, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* optional google.protobuf.Timestamp end_at = 5; */
        if (message.endAt)
            Timestamp.internalBinaryWrite(message.endAt, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 submit_limit = 6; */
        if (message.submitLimit !== undefined)
            writer.tag(6, WireType.Varint).int32(message.submitLimit);
        /* optional backend.Validator validator = 9; */
        if (message.validator !== undefined)
            writer.tag(9, WireType.Varint).int32(message.validator);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.UpdateContestRequest
 */
export const UpdateContestRequest = new UpdateContestRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateContestResponse$Type extends MessageType<UpdateContestResponse> {
    constructor() {
        super("backend.UpdateContestResponse", [
            { no: 1, name: "contest", kind: "message", T: () => Contest }
        ]);
    }
    create(value?: PartialMessage<UpdateContestResponse>): UpdateContestResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateContestResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateContestResponse): UpdateContestResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* backend.Contest contest */ 1:
                    message.contest = Contest.internalBinaryRead(reader, reader.uint32(), options, message.contest);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateContestResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* backend.Contest contest = 1; */
        if (message.contest)
            Contest.internalBinaryWrite(message.contest, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.UpdateContestResponse
 */
export const UpdateContestResponse = new UpdateContestResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetRankingRequest$Type extends MessageType<GetRankingRequest> {
    constructor() {
        super("backend.GetRankingRequest", [
            { no: 1, name: "contest_slug", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "contain_guest", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<GetRankingRequest>): GetRankingRequest {
        const message = { contestSlug: "", containGuest: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetRankingRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetRankingRequest): GetRankingRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string contest_slug */ 1:
                    message.contestSlug = reader.string();
                    break;
                case /* bool contain_guest */ 2:
                    message.containGuest = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetRankingRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string contest_slug = 1; */
        if (message.contestSlug !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.contestSlug);
        /* bool contain_guest = 2; */
        if (message.containGuest !== false)
            writer.tag(2, WireType.Varint).bool(message.containGuest);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.GetRankingRequest
 */
export const GetRankingRequest = new GetRankingRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetRankingResponse$Type extends MessageType<GetRankingResponse> {
    constructor() {
        super("backend.GetRankingResponse", [
            { no: 1, name: "records", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GetRankingResponse_Record }
        ]);
    }
    create(value?: PartialMessage<GetRankingResponse>): GetRankingResponse {
        const message = { records: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetRankingResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetRankingResponse): GetRankingResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated backend.GetRankingResponse.Record records */ 1:
                    message.records.push(GetRankingResponse_Record.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetRankingResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated backend.GetRankingResponse.Record records = 1; */
        for (let i = 0; i < message.records.length; i++)
            GetRankingResponse_Record.internalBinaryWrite(message.records[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.GetRankingResponse
 */
export const GetRankingResponse = new GetRankingResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetRankingResponse_Record$Type extends MessageType<GetRankingResponse_Record> {
    constructor() {
        super("backend.GetRankingResponse.Record", [
            { no: 1, name: "rank", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "group", kind: "message", T: () => Group },
            { no: 3, name: "score", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetRankingResponse_Record>): GetRankingResponse_Record {
        const message = { rank: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetRankingResponse_Record>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetRankingResponse_Record): GetRankingResponse_Record {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 rank */ 1:
                    message.rank = reader.int32();
                    break;
                case /* backend.Group group */ 2:
                    message.group = Group.internalBinaryRead(reader, reader.uint32(), options, message.group);
                    break;
                case /* optional int32 score */ 3:
                    message.score = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetRankingResponse_Record, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 rank = 1; */
        if (message.rank !== 0)
            writer.tag(1, WireType.Varint).int32(message.rank);
        /* backend.Group group = 2; */
        if (message.group)
            Group.internalBinaryWrite(message.group, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 score = 3; */
        if (message.score !== undefined)
            writer.tag(3, WireType.Varint).int32(message.score);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.GetRankingResponse.Record
 */
export const GetRankingResponse_Record = new GetRankingResponse_Record$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PingUnaryRequest$Type extends MessageType<PingUnaryRequest> {
    constructor() {
        super("backend.PingUnaryRequest", [
            { no: 1, name: "ping", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PingUnaryRequest>): PingUnaryRequest {
        const message = { ping: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PingUnaryRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PingUnaryRequest): PingUnaryRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string ping */ 1:
                    message.ping = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PingUnaryRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string ping = 1; */
        if (message.ping !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.ping);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.PingUnaryRequest
 */
export const PingUnaryRequest = new PingUnaryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PingUnaryResponse$Type extends MessageType<PingUnaryResponse> {
    constructor() {
        super("backend.PingUnaryResponse", [
            { no: 1, name: "pong", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PingUnaryResponse>): PingUnaryResponse {
        const message = { pong: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PingUnaryResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PingUnaryResponse): PingUnaryResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string pong */ 1:
                    message.pong = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PingUnaryResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string pong = 1; */
        if (message.pong !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.pong);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.PingUnaryResponse
 */
export const PingUnaryResponse = new PingUnaryResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PingServerSideStreamingRequest$Type extends MessageType<PingServerSideStreamingRequest> {
    constructor() {
        super("backend.PingServerSideStreamingRequest", [
            { no: 2, name: "ping", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PingServerSideStreamingRequest>): PingServerSideStreamingRequest {
        const message = { ping: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PingServerSideStreamingRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PingServerSideStreamingRequest): PingServerSideStreamingRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string ping */ 2:
                    message.ping = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PingServerSideStreamingRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string ping = 2; */
        if (message.ping !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.ping);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.PingServerSideStreamingRequest
 */
export const PingServerSideStreamingRequest = new PingServerSideStreamingRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PingServerSideStreamingResponse$Type extends MessageType<PingServerSideStreamingResponse> {
    constructor() {
        super("backend.PingServerSideStreamingResponse", [
            { no: 2, name: "pong", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PingServerSideStreamingResponse>): PingServerSideStreamingResponse {
        const message = { pong: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PingServerSideStreamingResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PingServerSideStreamingResponse): PingServerSideStreamingResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string pong */ 2:
                    message.pong = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PingServerSideStreamingResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string pong = 2; */
        if (message.pong !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.pong);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.PingServerSideStreamingResponse
 */
export const PingServerSideStreamingResponse = new PingServerSideStreamingResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListContestsRequest$Type extends MessageType<ListContestsRequest> {
    constructor() {
        super("backend.ListContestsRequest", []);
    }
    create(value?: PartialMessage<ListContestsRequest>): ListContestsRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListContestsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListContestsRequest): ListContestsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ListContestsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.ListContestsRequest
 */
export const ListContestsRequest = new ListContestsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListContestsResponse$Type extends MessageType<ListContestsResponse> {
    constructor() {
        super("backend.ListContestsResponse", [
            { no: 2, name: "contests", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Contest }
        ]);
    }
    create(value?: PartialMessage<ListContestsResponse>): ListContestsResponse {
        const message = { contests: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListContestsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListContestsResponse): ListContestsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated backend.Contest contests */ 2:
                    message.contests.push(Contest.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListContestsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated backend.Contest contests = 2; */
        for (let i = 0; i < message.contests.length; i++)
            Contest.internalBinaryWrite(message.contests[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.ListContestsResponse
 */
export const ListContestsResponse = new ListContestsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VerifyTokenRequest$Type extends MessageType<VerifyTokenRequest> {
    constructor() {
        super("backend.VerifyTokenRequest", []);
    }
    create(value?: PartialMessage<VerifyTokenRequest>): VerifyTokenRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VerifyTokenRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VerifyTokenRequest): VerifyTokenRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: VerifyTokenRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.VerifyTokenRequest
 */
export const VerifyTokenRequest = new VerifyTokenRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VerifyTokenResponse$Type extends MessageType<VerifyTokenResponse> {
    constructor() {
        super("backend.VerifyTokenResponse", [
            { no: 1, name: "ok", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<VerifyTokenResponse>): VerifyTokenResponse {
        const message = { ok: false, message: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VerifyTokenResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VerifyTokenResponse): VerifyTokenResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool ok */ 1:
                    message.ok = reader.bool();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VerifyTokenResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool ok = 1; */
        if (message.ok !== false)
            writer.tag(1, WireType.Varint).bool(message.ok);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.VerifyTokenResponse
 */
export const VerifyTokenResponse = new VerifyTokenResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetContestantInfoRequest$Type extends MessageType<GetContestantInfoRequest> {
    constructor() {
        super("backend.GetContestantInfoRequest", [
            { no: 1, name: "contest_slug", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetContestantInfoRequest>): GetContestantInfoRequest {
        const message = { contestSlug: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetContestantInfoRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetContestantInfoRequest): GetContestantInfoRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string contest_slug */ 1:
                    message.contestSlug = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetContestantInfoRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string contest_slug = 1; */
        if (message.contestSlug !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.contestSlug);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.GetContestantInfoRequest
 */
export const GetContestantInfoRequest = new GetContestantInfoRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetContestantInfoResponse$Type extends MessageType<GetContestantInfoResponse> {
    constructor() {
        super("backend.GetContestantInfoResponse", [
            { no: 1, name: "latest_submit", kind: "message", T: () => Submit },
            { no: 2, name: "remaining_submit_count", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetContestantInfoResponse>): GetContestantInfoResponse {
        const message = { remainingSubmitCount: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetContestantInfoResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetContestantInfoResponse): GetContestantInfoResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional backend.Submit latest_submit */ 1:
                    message.latestSubmit = Submit.internalBinaryRead(reader, reader.uint32(), options, message.latestSubmit);
                    break;
                case /* int32 remaining_submit_count */ 2:
                    message.remainingSubmitCount = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetContestantInfoResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional backend.Submit latest_submit = 1; */
        if (message.latestSubmit)
            Submit.internalBinaryWrite(message.latestSubmit, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 remaining_submit_count = 2; */
        if (message.remainingSubmitCount !== 0)
            writer.tag(2, WireType.Varint).int32(message.remainingSubmitCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.GetContestantInfoResponse
 */
export const GetContestantInfoResponse = new GetContestantInfoResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateGroupsRequest$Type extends MessageType<CreateGroupsRequest> {
    constructor() {
        super("backend.CreateGroupsRequest", [
            { no: 1, name: "groups", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CreateGroupsRequest_CreateGroupsGroup }
        ]);
    }
    create(value?: PartialMessage<CreateGroupsRequest>): CreateGroupsRequest {
        const message = { groups: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateGroupsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateGroupsRequest): CreateGroupsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated backend.CreateGroupsRequest.CreateGroupsGroup groups */ 1:
                    message.groups.push(CreateGroupsRequest_CreateGroupsGroup.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateGroupsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated backend.CreateGroupsRequest.CreateGroupsGroup groups = 1; */
        for (let i = 0; i < message.groups.length; i++)
            CreateGroupsRequest_CreateGroupsGroup.internalBinaryWrite(message.groups[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.CreateGroupsRequest
 */
export const CreateGroupsRequest = new CreateGroupsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateGroupsRequest_CreateGroupsGroup$Type extends MessageType<CreateGroupsRequest_CreateGroupsGroup> {
    constructor() {
        super("backend.CreateGroupsRequest.CreateGroupsGroup", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "year", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "role", kind: "enum", T: () => ["backend.Role", Role] }
        ]);
    }
    create(value?: PartialMessage<CreateGroupsRequest_CreateGroupsGroup>): CreateGroupsRequest_CreateGroupsGroup {
        const message = { name: "", password: "", year: 0, role: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateGroupsRequest_CreateGroupsGroup>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateGroupsRequest_CreateGroupsGroup): CreateGroupsRequest_CreateGroupsGroup {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string password */ 2:
                    message.password = reader.string();
                    break;
                case /* int32 year */ 3:
                    message.year = reader.int32();
                    break;
                case /* backend.Role role */ 4:
                    message.role = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateGroupsRequest_CreateGroupsGroup, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string password = 2; */
        if (message.password !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.password);
        /* int32 year = 3; */
        if (message.year !== 0)
            writer.tag(3, WireType.Varint).int32(message.year);
        /* backend.Role role = 4; */
        if (message.role !== 0)
            writer.tag(4, WireType.Varint).int32(message.role);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.CreateGroupsRequest.CreateGroupsGroup
 */
export const CreateGroupsRequest_CreateGroupsGroup = new CreateGroupsRequest_CreateGroupsGroup$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateGroupsResponse$Type extends MessageType<CreateGroupsResponse> {
    constructor() {
        super("backend.CreateGroupsResponse", [
            { no: 1, name: "groups", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Group }
        ]);
    }
    create(value?: PartialMessage<CreateGroupsResponse>): CreateGroupsResponse {
        const message = { groups: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateGroupsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateGroupsResponse): CreateGroupsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated backend.Group groups */ 1:
                    message.groups.push(Group.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateGroupsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated backend.Group groups = 1; */
        for (let i = 0; i < message.groups.length; i++)
            Group.internalBinaryWrite(message.groups[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.CreateGroupsResponse
 */
export const CreateGroupsResponse = new CreateGroupsResponse$Type();
