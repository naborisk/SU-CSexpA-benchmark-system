// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "services/benchmark-service/services.proto" (package "benchmark", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { BenchmarkService } from "./services";
import type { CheckConnectionResponse } from "./messages";
import type { CheckConnectionRequest } from "./messages";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ExecuteResponse } from "./messages";
import type { ExecuteRequest } from "./messages";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service benchmark.BenchmarkService
 */
export interface IBenchmarkServiceClient {
    /**
     * @generated from protobuf rpc: Execute(benchmark.ExecuteRequest) returns (stream benchmark.ExecuteResponse);
     */
    execute(input: ExecuteRequest, options?: RpcOptions): ServerStreamingCall<ExecuteRequest, ExecuteResponse>;
    /**
     * @generated from protobuf rpc: CheckConnection(benchmark.CheckConnectionRequest) returns (benchmark.CheckConnectionResponse);
     */
    checkConnection(input: CheckConnectionRequest, options?: RpcOptions): UnaryCall<CheckConnectionRequest, CheckConnectionResponse>;
}
/**
 * @generated from protobuf service benchmark.BenchmarkService
 */
export class BenchmarkServiceClient implements IBenchmarkServiceClient, ServiceInfo {
    typeName = BenchmarkService.typeName;
    methods = BenchmarkService.methods;
    options = BenchmarkService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Execute(benchmark.ExecuteRequest) returns (stream benchmark.ExecuteResponse);
     */
    execute(input: ExecuteRequest, options?: RpcOptions): ServerStreamingCall<ExecuteRequest, ExecuteResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ExecuteRequest, ExecuteResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CheckConnection(benchmark.CheckConnectionRequest) returns (benchmark.CheckConnectionResponse);
     */
    checkConnection(input: CheckConnectionRequest, options?: RpcOptions): UnaryCall<CheckConnectionRequest, CheckConnectionResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<CheckConnectionRequest, CheckConnectionResponse>("unary", this._transport, method, opt, input);
    }
}
