// @generated by protobuf-ts 2.8.3
// @generated from protobuf file "backend/messages.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Submit } from "./resources";
import { Timestamp } from "../google/protobuf/timestamp";
import { Group } from "./resources";
/**
 * @generated from protobuf message PostLoginRequest
 */
export interface PostLoginRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string; // it means group_id
    /**
     * @generated from protobuf field: string password = 2;
     */
    password: string;
}
/**
 * @generated from protobuf message PostLoginResponse
 */
export interface PostLoginResponse {
    /**
     * @generated from protobuf field: Group group = 1;
     */
    group?: Group;
    /**
     * @generated from protobuf field: string token = 2;
     */
    token: string;
}
/**
 * @generated from protobuf message PostSubmitRequest
 */
export interface PostSubmitRequest {
    /**
     * @generated from protobuf field: string url = 1;
     */
    url: string;
    /**
     * @generated from protobuf field: int32 contest_id = 2;
     */
    contestId: number;
}
/**
 * @generated from protobuf message PostSubmitResponse
 */
export interface PostSubmitResponse {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: string url = 2;
     */
    url: string;
    /**
     * @generated from protobuf field: int32 contest_id = 3;
     */
    contestId: number;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp submited_at = 4;
     */
    submitedAt?: Timestamp;
}
/**
 * @generated from protobuf message GetSubmitRequest
 */
export interface GetSubmitRequest {
    /**
     * @generated from protobuf field: int32 submit_id = 1;
     */
    submitId: number;
}
/**
 * @generated from protobuf message GetSubmitResponse
 */
export interface GetSubmitResponse {
    /**
     * @generated from protobuf field: Submit submit = 1;
     */
    submit?: Submit;
}
/**
 * @generated from protobuf message GetRankingRequest
 */
export interface GetRankingRequest {
    /**
     * @generated from protobuf field: int32 year = 1;
     */
    year: number;
    /**
     * @generated from protobuf field: bool contain_guest = 2;
     */
    containGuest: boolean; // if it is true, return ranking which includes guests
}
/**
 * @generated from protobuf message GetRankingResponse
 */
export interface GetRankingResponse {
    /**
     * @generated from protobuf field: repeated GetRankingResponse.Record records = 1;
     */
    records: GetRankingResponse_Record[];
}
/**
 * @generated from protobuf message GetRankingResponse.Record
 */
export interface GetRankingResponse_Record {
    /**
     * @generated from protobuf field: int32 rank = 1;
     */
    rank: number;
    /**
     * @generated from protobuf field: Group group = 2;
     */
    group?: Group;
}
/**
 * @generated from protobuf message GetGroupRequest
 */
export interface GetGroupRequest {
    /**
     * @generated from protobuf field: string group_id = 1;
     */
    groupId: string;
}
/**
 * @generated from protobuf message GetGroupResponse
 */
export interface GetGroupResponse {
    /**
     * @generated from protobuf field: repeated GetGroupResponse.GroupInfo groups = 1;
     */
    groups: GetGroupResponse_GroupInfo[];
}
/**
 * @generated from protobuf message GetGroupResponse.GroupInfo
 */
export interface GetGroupResponse_GroupInfo {
    /**
     * @generated from protobuf field: Group group = 1;
     */
    group?: Group;
    /**
     * @generated from protobuf field: repeated Submit submits = 2;
     */
    submits: Submit[];
}
/**
 * @generated from protobuf message PingUnaryRequest
 */
export interface PingUnaryRequest {
    /**
     * @generated from protobuf field: string ping = 1;
     */
    ping: string;
}
/**
 * @generated from protobuf message PingUnaryResponse
 */
export interface PingUnaryResponse {
    /**
     * @generated from protobuf field: string pong = 1;
     */
    pong: string;
}
/**
 * @generated from protobuf message PingServerSideStreamingRequest
 */
export interface PingServerSideStreamingRequest {
    /**
     * @generated from protobuf field: string ping = 2;
     */
    ping: string;
}
/**
 * @generated from protobuf message PingServerSideStreamingResponse
 */
export interface PingServerSideStreamingResponse {
    /**
     * @generated from protobuf field: string pong = 2;
     */
    pong: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class PostLoginRequest$Type extends MessageType<PostLoginRequest> {
    constructor() {
        super("PostLoginRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PostLoginRequest>): PostLoginRequest {
        const message = { id: "", password: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PostLoginRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PostLoginRequest): PostLoginRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string password */ 2:
                    message.password = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PostLoginRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string password = 2; */
        if (message.password !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.password);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PostLoginRequest
 */
export const PostLoginRequest = new PostLoginRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PostLoginResponse$Type extends MessageType<PostLoginResponse> {
    constructor() {
        super("PostLoginResponse", [
            { no: 1, name: "group", kind: "message", T: () => Group },
            { no: 2, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PostLoginResponse>): PostLoginResponse {
        const message = { token: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PostLoginResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PostLoginResponse): PostLoginResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Group group */ 1:
                    message.group = Group.internalBinaryRead(reader, reader.uint32(), options, message.group);
                    break;
                case /* string token */ 2:
                    message.token = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PostLoginResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Group group = 1; */
        if (message.group)
            Group.internalBinaryWrite(message.group, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string token = 2; */
        if (message.token !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.token);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PostLoginResponse
 */
export const PostLoginResponse = new PostLoginResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PostSubmitRequest$Type extends MessageType<PostSubmitRequest> {
    constructor() {
        super("PostSubmitRequest", [
            { no: 1, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "contest_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PostSubmitRequest>): PostSubmitRequest {
        const message = { url: "", contestId: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PostSubmitRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PostSubmitRequest): PostSubmitRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string url */ 1:
                    message.url = reader.string();
                    break;
                case /* int32 contest_id */ 2:
                    message.contestId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PostSubmitRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string url = 1; */
        if (message.url !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.url);
        /* int32 contest_id = 2; */
        if (message.contestId !== 0)
            writer.tag(2, WireType.Varint).int32(message.contestId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PostSubmitRequest
 */
export const PostSubmitRequest = new PostSubmitRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PostSubmitResponse$Type extends MessageType<PostSubmitResponse> {
    constructor() {
        super("PostSubmitResponse", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "contest_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "submited_at", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<PostSubmitResponse>): PostSubmitResponse {
        const message = { id: 0, url: "", contestId: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PostSubmitResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PostSubmitResponse): PostSubmitResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* string url */ 2:
                    message.url = reader.string();
                    break;
                case /* int32 contest_id */ 3:
                    message.contestId = reader.int32();
                    break;
                case /* google.protobuf.Timestamp submited_at */ 4:
                    message.submitedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.submitedAt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PostSubmitResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* string url = 2; */
        if (message.url !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.url);
        /* int32 contest_id = 3; */
        if (message.contestId !== 0)
            writer.tag(3, WireType.Varint).int32(message.contestId);
        /* google.protobuf.Timestamp submited_at = 4; */
        if (message.submitedAt)
            Timestamp.internalBinaryWrite(message.submitedAt, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PostSubmitResponse
 */
export const PostSubmitResponse = new PostSubmitResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetSubmitRequest$Type extends MessageType<GetSubmitRequest> {
    constructor() {
        super("GetSubmitRequest", [
            { no: 1, name: "submit_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetSubmitRequest>): GetSubmitRequest {
        const message = { submitId: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetSubmitRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetSubmitRequest): GetSubmitRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 submit_id */ 1:
                    message.submitId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetSubmitRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 submit_id = 1; */
        if (message.submitId !== 0)
            writer.tag(1, WireType.Varint).int32(message.submitId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetSubmitRequest
 */
export const GetSubmitRequest = new GetSubmitRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetSubmitResponse$Type extends MessageType<GetSubmitResponse> {
    constructor() {
        super("GetSubmitResponse", [
            { no: 1, name: "submit", kind: "message", T: () => Submit }
        ]);
    }
    create(value?: PartialMessage<GetSubmitResponse>): GetSubmitResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetSubmitResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetSubmitResponse): GetSubmitResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Submit submit */ 1:
                    message.submit = Submit.internalBinaryRead(reader, reader.uint32(), options, message.submit);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetSubmitResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Submit submit = 1; */
        if (message.submit)
            Submit.internalBinaryWrite(message.submit, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetSubmitResponse
 */
export const GetSubmitResponse = new GetSubmitResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetRankingRequest$Type extends MessageType<GetRankingRequest> {
    constructor() {
        super("GetRankingRequest", [
            { no: 1, name: "year", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "contain_guest", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<GetRankingRequest>): GetRankingRequest {
        const message = { year: 0, containGuest: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetRankingRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetRankingRequest): GetRankingRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 year */ 1:
                    message.year = reader.int32();
                    break;
                case /* bool contain_guest */ 2:
                    message.containGuest = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetRankingRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 year = 1; */
        if (message.year !== 0)
            writer.tag(1, WireType.Varint).int32(message.year);
        /* bool contain_guest = 2; */
        if (message.containGuest !== false)
            writer.tag(2, WireType.Varint).bool(message.containGuest);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetRankingRequest
 */
export const GetRankingRequest = new GetRankingRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetRankingResponse$Type extends MessageType<GetRankingResponse> {
    constructor() {
        super("GetRankingResponse", [
            { no: 1, name: "records", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GetRankingResponse_Record }
        ]);
    }
    create(value?: PartialMessage<GetRankingResponse>): GetRankingResponse {
        const message = { records: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetRankingResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetRankingResponse): GetRankingResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated GetRankingResponse.Record records */ 1:
                    message.records.push(GetRankingResponse_Record.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetRankingResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated GetRankingResponse.Record records = 1; */
        for (let i = 0; i < message.records.length; i++)
            GetRankingResponse_Record.internalBinaryWrite(message.records[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetRankingResponse
 */
export const GetRankingResponse = new GetRankingResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetRankingResponse_Record$Type extends MessageType<GetRankingResponse_Record> {
    constructor() {
        super("GetRankingResponse.Record", [
            { no: 1, name: "rank", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "group", kind: "message", T: () => Group }
        ]);
    }
    create(value?: PartialMessage<GetRankingResponse_Record>): GetRankingResponse_Record {
        const message = { rank: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetRankingResponse_Record>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetRankingResponse_Record): GetRankingResponse_Record {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 rank */ 1:
                    message.rank = reader.int32();
                    break;
                case /* Group group */ 2:
                    message.group = Group.internalBinaryRead(reader, reader.uint32(), options, message.group);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetRankingResponse_Record, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 rank = 1; */
        if (message.rank !== 0)
            writer.tag(1, WireType.Varint).int32(message.rank);
        /* Group group = 2; */
        if (message.group)
            Group.internalBinaryWrite(message.group, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetRankingResponse.Record
 */
export const GetRankingResponse_Record = new GetRankingResponse_Record$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetGroupRequest$Type extends MessageType<GetGroupRequest> {
    constructor() {
        super("GetGroupRequest", [
            { no: 1, name: "group_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetGroupRequest>): GetGroupRequest {
        const message = { groupId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetGroupRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetGroupRequest): GetGroupRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string group_id */ 1:
                    message.groupId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetGroupRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string group_id = 1; */
        if (message.groupId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.groupId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetGroupRequest
 */
export const GetGroupRequest = new GetGroupRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetGroupResponse$Type extends MessageType<GetGroupResponse> {
    constructor() {
        super("GetGroupResponse", [
            { no: 1, name: "groups", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GetGroupResponse_GroupInfo }
        ]);
    }
    create(value?: PartialMessage<GetGroupResponse>): GetGroupResponse {
        const message = { groups: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetGroupResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetGroupResponse): GetGroupResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated GetGroupResponse.GroupInfo groups */ 1:
                    message.groups.push(GetGroupResponse_GroupInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetGroupResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated GetGroupResponse.GroupInfo groups = 1; */
        for (let i = 0; i < message.groups.length; i++)
            GetGroupResponse_GroupInfo.internalBinaryWrite(message.groups[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetGroupResponse
 */
export const GetGroupResponse = new GetGroupResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetGroupResponse_GroupInfo$Type extends MessageType<GetGroupResponse_GroupInfo> {
    constructor() {
        super("GetGroupResponse.GroupInfo", [
            { no: 1, name: "group", kind: "message", T: () => Group },
            { no: 2, name: "submits", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Submit }
        ]);
    }
    create(value?: PartialMessage<GetGroupResponse_GroupInfo>): GetGroupResponse_GroupInfo {
        const message = { submits: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetGroupResponse_GroupInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetGroupResponse_GroupInfo): GetGroupResponse_GroupInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Group group */ 1:
                    message.group = Group.internalBinaryRead(reader, reader.uint32(), options, message.group);
                    break;
                case /* repeated Submit submits */ 2:
                    message.submits.push(Submit.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetGroupResponse_GroupInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Group group = 1; */
        if (message.group)
            Group.internalBinaryWrite(message.group, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated Submit submits = 2; */
        for (let i = 0; i < message.submits.length; i++)
            Submit.internalBinaryWrite(message.submits[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetGroupResponse.GroupInfo
 */
export const GetGroupResponse_GroupInfo = new GetGroupResponse_GroupInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PingUnaryRequest$Type extends MessageType<PingUnaryRequest> {
    constructor() {
        super("PingUnaryRequest", [
            { no: 1, name: "ping", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PingUnaryRequest>): PingUnaryRequest {
        const message = { ping: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PingUnaryRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PingUnaryRequest): PingUnaryRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string ping */ 1:
                    message.ping = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PingUnaryRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string ping = 1; */
        if (message.ping !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.ping);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PingUnaryRequest
 */
export const PingUnaryRequest = new PingUnaryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PingUnaryResponse$Type extends MessageType<PingUnaryResponse> {
    constructor() {
        super("PingUnaryResponse", [
            { no: 1, name: "pong", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PingUnaryResponse>): PingUnaryResponse {
        const message = { pong: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PingUnaryResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PingUnaryResponse): PingUnaryResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string pong */ 1:
                    message.pong = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PingUnaryResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string pong = 1; */
        if (message.pong !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.pong);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PingUnaryResponse
 */
export const PingUnaryResponse = new PingUnaryResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PingServerSideStreamingRequest$Type extends MessageType<PingServerSideStreamingRequest> {
    constructor() {
        super("PingServerSideStreamingRequest", [
            { no: 2, name: "ping", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PingServerSideStreamingRequest>): PingServerSideStreamingRequest {
        const message = { ping: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PingServerSideStreamingRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PingServerSideStreamingRequest): PingServerSideStreamingRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string ping */ 2:
                    message.ping = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PingServerSideStreamingRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string ping = 2; */
        if (message.ping !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.ping);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PingServerSideStreamingRequest
 */
export const PingServerSideStreamingRequest = new PingServerSideStreamingRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PingServerSideStreamingResponse$Type extends MessageType<PingServerSideStreamingResponse> {
    constructor() {
        super("PingServerSideStreamingResponse", [
            { no: 2, name: "pong", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PingServerSideStreamingResponse>): PingServerSideStreamingResponse {
        const message = { pong: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PingServerSideStreamingResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PingServerSideStreamingResponse): PingServerSideStreamingResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string pong */ 2:
                    message.pong = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PingServerSideStreamingResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string pong = 2; */
        if (message.pong !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.pong);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PingServerSideStreamingResponse
 */
export const PingServerSideStreamingResponse = new PingServerSideStreamingResponse$Type();
